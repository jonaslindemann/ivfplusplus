project(ivf)

cmake_minimum_required(VERSION 3.0)

option(IVF_UI "Build user interface integration libraries." ON)
option(IVF_UI_FLTK "Build user interface integration libraries." ON)
option(IVF_UI_WIN32 "Build user interface integration libraries." OFF)
option(IVF_UI_GLUT "Build user interface integration libraries." ON)
option(IVF_IMAGE "Build Ivf++ image support." ON)
option(IVF_FONT "Build Ivf++ with font support." OFF)
option(IVF_EXAMPLES "Build Ivf++ examples." ON)
option(IVF_EXAMPLES_GENERIC "Build Ivf++ generic examples" ON)
option(IVF_EXAMPLES_GLE "Build Ivf++ GLE examples" ON)
option(IVF_EXAMPLES_FLTK "Build Ivf++ FLTK examples" OFF)
option(IVF_EXAMPLES_WIN32 "Build Ivf++ WIN32 examples" OFF)
option(IVF_EXAMPLES_FONTS "Build Ivf++ font support examples" OFF)
option(IVF_EXAMPLES_ASSIMP "Build Ivf++ assimp examples" OFF)
option(IVF_DEBUG "Build Ivf++ with debug information." OFF)
option(IVF_SHARED "Build Ivf++ as shared libraries." OFF)

set(FLTK_ABI_INCLUDE_DIR "")
set(GDIPLUS_LIBRARY "")
set(DEPEND_DIR "/home/bmjl/Development/depends")

if (WIN32)
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        message("Debug libraries...")
        set(FLTK_INCLUDE_DIR "d:/Libraries/fltk")
        set(FLTK_ABI_INCLUDE_DIR "d:/Libraries/fltk/build-debug")
        set(FLTK_BASE_LIBRARY "d:/Libraries/fltk/build-debug/lib/Debug/fltkd.lib")
        set(FLTK_GL_LIBRARY "d:/Libraries/fltk/build-debug/lib/Debug/fltk_gld.lib")
        set(JPEG_INCLUDE_DIR "d:/Libraries/fltk/jpeg")
        set(JPEG_LIBRARY "d:/Libraries/fltk/build-debug/lib/Debug/fltk_jpegd.lib")
        set(PNG_INCLUDE_DIR "d:/Libraries/fltk/png")
        set(PNG_LIBRARY "d:/Libraries/fltk/build-debug/lib/Debug/fltk_pngd.lib")
        set(ZLIB_INCLUDE_DIR "d:/Libraries/fltk/zlib")
        set(ZLIB_LIBRARY "d:/Libraries/fltk/build-debug/lib/Debug/fltk_zd.lib")
        set(GLEW_INCLUDE_DIR "d:/Libraries/glew/include")
        set(GLEW_LIBRARY "d:/Libraries/glew/lib/Debug/x64/glew32sd.lib")
        #set(FREETYPE_INCLUDE_DIR
        set(OPENGL_LIBRARY "opengl32")
        set(GLUT_INCLUDE_DIR "D:/Libraries/freeglut/include")
        set(GLUT_LIBRARY "D:/Libraries/freeglut/build-debug/lib/Debug/freeglut_staticd.lib")
        set(GDIPLUS_LIBRARY "gdiplus")
    else()
        message("Release libraries...")
        set(FLTK_INCLUDE_DIR "d:/Libraries/fltk")
        set(FLTK_ABI_INCLUDE_DIR "d:/Libraries/fltk/build-release")
        set(FLTK_BASE_LIBRARY "d:/Libraries/fltk/build-release/lib/Release/fltk.lib")
        set(FLTK_GL_LIBRARY " D:/Libraries/fltk/build-release/lib/Release/fltk_gl.lib")
        set(JPEG_INCLUDE_DIR "d:/Libraries/fltk/jpeg")
        set(JPEG_LIBRARY "d:/Libraries/fltk/build-release/lib/Release/fltk_jpeg.lib")
        set(PNG_INCLUDE_DIR "d:/Libraries/fltk/png")
        set(PNG_LIBRARY "d:/Libraries/fltk/build-release/lib/Release/fltk_png.lib")
        set(ZLIB_INCLUDE_DIR "d:/Libraries/fltk/zlib")
        set(ZLIB_LIBRARY "d:/Libraries/fltk/build-release/lib/Release/fltk_z.lib")
        set(GLEW_INCLUDE_DIR "d:/Libraries/glew/include")
        set(GLEW_LIBRARY "d:/Libraries/glew/lib/Release/x64/glew32s.lib")
        #set(FREETYPE_INCLUDE_DIR
        set(OPENGL_LIBRARY "opengl32")
        set(GLUT_INCLUDE_DIR "D:/Libraries/freeglut/include")
        set(GLUT_LIBRARY "D:/Libraries/freeglut/build-release/lib/Release/freeglut_static.lib")
        set(GDIPLUS_LIBRARY "gdiplus")
    endif()
else()
        set(GLUT_INCLUDE_DIR "${DEPEND_DIR}/include")
        set(GLUT_LIBRARY "glut")
        set(FLTK_BASE_LIBRARY "fltk")
        set(FLTK_GL_LIBRARY "fltk_gl")
        set(PNG_LIBRARY "png")
        set(JPEG_LIBRARY "jpeg")
endif()

include(cmake/CPM.cmake)



#find_package(GLEW)
#find_package(GLUT)
#find_package(OpenGL)
#find_package(JPEG)
#find_package(PNG)
#find_package(ZLIB)
#find_package(FreeType)
#find_package(FLTK)


set( LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib )
set( EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin )

#include_directories( ${GLUT_INCLUDE_DIR} ${FLTK_INCLUDE_DIR} ${FLTK_ABI_INCLUDE_DIR} ${JPEG_INCLUDE_DIR} ${PNG_PNG_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${GLEW_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIR} ${PROJECT_SOURCE_DIR}/include/vc ${PROJECT_SOURCE_DIR}/include ${FREETYPE_INCLUDE} ${ASSIMP_INCLUDE} )
if (WIN32)
include_directories( ${GLUT_INCLUDE_DIR} ${FLTK_INCLUDE_DIR} ${FLTK_ABI_INCLUDE_DIR} ${JPEG_INCLUDE_DIR} ${PNG_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${GLEW_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIR} ${PROJECT_SOURCE_DIR}/include/vc ${PROJECT_SOURCE_DIR}/include ${FREETYPE_INCLUDE} ${ASSIMP_INCLUDE} )
else()
include_directories( ${PROJECT_SOURCE_DIR}/include/vc ${PROJECT_SOURCE_DIR}/include ${DEPEND_DIR}/include )
endif()
link_directories(${PROJECT_SOURCE_DIR}/lib ${DEPEND_DIR}/lib64 )

if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
	set(IVF_DEBUG on)
else( CMAKE_BUILD_TYPE STREQUAL "Debug" )
	set(IVF_DEBUG off)
endif( CMAKE_BUILD_TYPE STREQUAL "Debug" )

if(WIN32)
	message( "ivf++ windows build" )
else(WIN32)
	if(APPLE)
		message("Max OS X build")
	else(APPLE)
		message( "ivf++ linux build")
	endif(APPLE)
endif(WIN32)

if(IVF_DEBUG)
	message( "debug information on" )
else(IVF_DEBUG)
	message( "debug information off" )
endif(IVF_DEBUG)

if(IVF_SHARED)
	message( "building shared libraries." )
else(IVF_SHARED)
	message( "building static libraries." )
endif(IVF_SHARED)

if(WIN32)
    if(IVF_DEBUG)
		string(REPLACE "/zi" "/z7" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
		string(REPLACE "/zi" "/z7" CMAKE_C_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})
    endif(IVF_DEBUG)
endif(WIN32)

macro(IVFAPP_SETUP)

	file(GLOB SOURCE_FILES *.cpp)
	file(GLOB INCLUDE_FILES *.h) 	

        if (WIN32)
        if(IVF_DEBUG)
                add_executable( ${IVFAPP_NAME}d ${SOURCE_FILES} ${INCLUDE_FILES})
                target_link_libraries( ${IVFAPP_NAME}d ${IVFAPP_DEBUG_LIBS} ${FLTK_BASE_LIBRARY} ${FLTK_GL_LIBRARY} ${JPEG_LIBRARY} ${PNG_LIBRARY} ${ZLIB_LIBRARY} ${OPENGL_LIBRARY} ${GLUT_LIBRARY} ${GLEW_LIBRARY} ${GDIPLUS_LIBRARY})
                install_targets( /bin ${IVFAPP_NAME}d )
        else(IVF_DEBUG)
                add_executable(${IVFAPP_NAME} ${SOURCE_FILES} ${INCLUDE_FILES})
                target_link_libraries( ${IVFAPP_NAME} ${IVFAPP_LIBS} ${FLTK_BASE_LIBRARY} ${FLTK_GL_LIBRARY} ${JPEG_LIBRARY} ${PNG_LIBRARY} ${ZLIB_LIBRARY} ${OPENGL_LIBRARY} ${GLUT_LIBRARY} ${GLEW_LIBRARY} ${GDIPLUS_LIBRARY})
                install_targets( /bin ${IVFAPP_NAME} )
        endif(IVF_DEBUG)
        else()
                add_executable(${IVFAPP_NAME} ${SOURCE_FILES} ${INCLUDE_FILES})
                target_link_libraries( ${IVFAPP_NAME} ${IVFAPP_LIBS} X11 Xft Xcursor Xinerama Xrender Xfixes fontconfig pthread ${FLTK_BASE_LIBRARY} ${FLTK_GL_LIBRARY} ${JPEG_LIBRARY} ${PNG_LIBRARY} ${ZLIB_LIBRARY} ${OPENGL_LIBRARY} ${GLUT_LIBRARY} ${GLEW_LIBRARY} ${GDIPLUS_LIBRARY} dl)
                install_targets( /bin ${IVFAPP_NAME} )
        endif()

endmacro(IVFAPP_SETUP)

macro(IVFCONAPP_SETUP)
        if(WIN32)
                include_directories(${PROJECT_SOURCE_DIR}/include)
        else()
                include_directories(${PROJECT_SOURCE_DIR}/include ${FREETYPE_INCLUDE})
        endif()

        file(GLOB SOURCE_FILES *.cpp)
        file(GLOB INCLUDE_FILES *.h)

        set(EXT_LIBS "")
        set(EXT_DEBUG_LIBS "")

        if(IVF_SHARED)
                if(WIN32)
                        add_definitions(-DIVF_DLL -DFL_DLL)
                endif()
        else()
                if(WIN32)
                        set(EXT_DEBUG_LIBS ${FLTK_BASE_LIBRARY} ${FLTK_GL_LIBRARY} ${GDIPLUS_LIBRARY})
                        set(EXT_LIBS ${FLTK_BASE_LIBRARY} ${FLTK_GL_LIBRARY} ${GDIPLUS_LIBRARY})
                else()
                        set(EXT_LIBS "dl")
                endif()
        endif()

        if(WIN32)
                if(IVF_DEBUG)
                        add_executable( ${IVFAPP_NAME}d ${SOURCE_FILES} ${INCLUDE_FILES})
                        target_link_libraries( ${IVFAPP_NAME}d ${IVFAPP_DEBUG_LIBS} ${EXT_DEBUG_LIBS})
                        install_targets( /bin ${IVFAPP_NAME})
                else()
                        add_executable(${IVFAPP_NAME} ${SOURCE_FILES} ${INCLUDE_FILES})
                        target_link_libraries( ${IVFAPP_NAME} ${IVFAPP_LIBS} ${EXT_LIBS})
                        install_targets( /bin ${IVFAPP_NAME} )
                endif()
        else()
                message("LINUX")
                add_executable(${IVFAPP_NAME} ${SOURCE_FILES})
                target_link_libraries(${IVFAPP_NAME} ${IVFAPP_LIBS} ${EXT_LIBS} ) 
                install_targets( /bin ${IVFAPP_NAME} )
        endif()

endmacro(IVFCONAPP_SETUP)

if (IVF_EXAMPLES)
	subdirs(src include examples utils)
else (IVF_EXAMPLES)
	subdirs(src include utils)
endif (IVF_EXAMPLES)
