// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "MainFrame.h"

inline void CMainFrame::cb_btnSelectAll_i(Fl_Button*, void*) {
  workspaceView->selectAll();
}
void CMainFrame::cb_btnSelectAll(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnSelectAll_i(o,v);
}

inline void CMainFrame::cb_btnSelect_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(CWorkspaceView::VM_SELECT_SHAPES);
outInfo->value("Select nodes and beams using the mouse.");
}
void CMainFrame::cb_btnSelect(Fl_Light_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnSelect_i(o,v);
}

inline void CMainFrame::cb_btnMove_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(CWorkspaceView::VM_MOVE_SHAPES);
outInfo->value("Use the mouse to select start point for move.");
}
void CMainFrame::cb_btnMove(Fl_Light_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnMove_i(o,v);
}

inline void CMainFrame::cb_btnCopy_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(CWorkspaceView::VM_COPY_SHAPES);
outInfo->value("Use the mouse to select starting point for copy operation.");
}
void CMainFrame::cb_btnCopy(Fl_Light_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnCopy_i(o,v);
}

inline void CMainFrame::cb_btnDelete_i(Fl_Button*, void*) {
  workspaceView->deleteSelectedNodes();
}
void CMainFrame::cb_btnDelete(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnDelete_i(o,v);
}

inline void CMainFrame::cb_btnCreateNodes_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(CWorkspaceView::VM_CREATE_SHAPES);
outInfo->value("Use the mouse to create nodes.");
}
void CMainFrame::cb_btnCreateNodes(Fl_Light_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnCreateNodes_i(o,v);
}

inline void CMainFrame::cb_btnCreateLines_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(CWorkspaceView::VM_CREATE_LINES);
outInfo->value("Create beams by selecting two nodes.");
}
void CMainFrame::cb_btnCreateLines(Fl_Light_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnCreateLines_i(o,v);
}

inline void CMainFrame::cb_btnCreateVectors_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(CWorkspaceView::VM_CREATE_VECTORS);
outInfo->value("Select a node to create a load.");
}
void CMainFrame::cb_btnCreateVectors(Fl_Light_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnCreateVectors_i(o,v);
}

CMainFrame::CMainFrame() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = wndMain = new Fl_Double_Window(849, 653, "ObjectiveFrame HCI prototype");
    w = o;
    o->user_data((void*)(this));
    { CWorkspaceView* o = workspaceView = new CWorkspaceView(87, 0, 762, 609, "label");
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)27);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 87, 653);
      { Fl_Button* o = btnSelectAll = new Fl_Button(5, 35, 74, 35, "Select all nodes");
        o->tooltip("Select all nodes");
        o->down_box(FL_DOWN_BOX);
        o->shortcut(0x40061);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnSelectAll);
        o->align(FL_ALIGN_WRAP);
      }
      { Fl_Light_Button* o = btnSelect = new Fl_Light_Button(5, 6, 74, 23, "Select");
        o->tooltip("Select nodes and beams");
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->shortcut(0x40073);
        o->selection_color((Fl_Color)4);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnSelect);
      }
      { Fl_Light_Button* o = btnMove = new Fl_Light_Button(5, 169, 74, 23, "Move");
        o->tooltip("Move selected nodes");
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->shortcut(0x4006d);
        o->selection_color((Fl_Color)4);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnMove);
      }
      { Fl_Light_Button* o = btnCopy = new Fl_Light_Button(5, 195, 74, 23, "Copy");
        o->tooltip("Copy selected nodes");
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->shortcut(0x40063);
        o->selection_color((Fl_Color)4);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnCopy);
      }
      { Fl_Button* o = btnDelete = new Fl_Button(5, 221, 74, 23, "Delete");
        o->tooltip("Delete selected nodes");
        o->shortcut(0xffff);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnDelete);
      }
      { Fl_Light_Button* o = btnCreateNodes = new Fl_Light_Button(5, 82, 74, 23, "Nodes");
        o->tooltip("Create nodes");
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->shortcut(0x4006e);
        o->selection_color((Fl_Color)4);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnCreateNodes);
      }
      { Fl_Light_Button* o = btnCreateLines = new Fl_Light_Button(5, 108, 74, 23, "Beams");
        o->tooltip("Create beams between nodes");
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->shortcut(0x4006e);
        o->selection_color((Fl_Color)4);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnCreateLines);
      }
      { Fl_Light_Button* o = btnCreateVectors = new Fl_Light_Button(5, 134, 74, 23, "Loads");
        o->tooltip("Create node loads");
        o->type(102);
        o->down_box(FL_DOWN_BOX);
        o->shortcut(0x4006e);
        o->selection_color((Fl_Color)4);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_btnCreateVectors);
      }
      o->end();
    }
    { Fl_Scroll* o = new Fl_Scroll(87, 611, 756, 42);
      { Fl_Output* o = outX = new Fl_Output(106, 619, 64, 27, "X ");
        o->color((Fl_Color)31);
        o->labelfont(1);
        o->textfont(1);
        o->textsize(16);
      }
      { Fl_Output* o = outY = new Fl_Output(202, 620, 64, 26, "Y ");
        o->color((Fl_Color)31);
        o->labelfont(1);
        o->textfont(1);
        o->textsize(16);
      }
      { Fl_Output* o = outZ = new Fl_Output(302, 620, 65, 26, "Z ");
        o->color((Fl_Color)31);
        o->labelfont(1);
        o->textfont(1);
        o->textsize(16);
      }
      { Fl_Output* o = outInfo = new Fl_Output(426, 619, 417, 26, "Info");
        o->color((Fl_Color)31);
        o->labelfont(1);
        o->textfont(1);
      }
      o->end();
    }
    o->end();
  }
}

void CMainFrame::show() {
  wndMain->size(Fl::w()-40, Fl::h()-40);
wndMain->position(20,40);
outInfo->value("Använd musen för att placera ut noder.");
wndMain->show();
workspaceView->setViewModeChangeEvent(this);
workspaceView->setCoordinateEvent(this);
workspaceView->setSelectionChangedEvent(this);

btnMove->deactivate();
btnCopy->deactivate();
btnDelete->deactivate();

workspaceView->show();
}

void CMainFrame::onViewModeChange(TViewModeEvent newMode) {
  switch (newMode) {
case VM_SELECT_SHAPES:
	outInfo->value("Välj noder och stänger med musen.");
	btnSelect->setonly();
	break;
case VM_CREATE_LINES:
	outInfo->value("Skapa stänger genom att markera två noder.");
	btnCreateLines->setonly();
	break;
case VM_CREATE_VECTORS:
	outInfo->value("Markera en nod för att placera en last.");
	btnCreateVectors->setonly();
	break;
case VM_CREATE_SHAPES:
	outInfo->value("Använd musen för att placera ut noder.");
	btnCreateNodes->setonly();
	break;
case VM_MOVE_SHAPES:
	outInfo->value("Använd musen för att välja startpunkt vid förflyttning av noder.");
	btnMove->setonly();
	break;
case VM_COPY_SHAPES:
	outInfo->value("Använd musen för att välja startpunkt vid kopiering av noder.");
	btnCopy->setonly();
	break;
default:
	btnCreateNodes->setonly();
	break;
}
}

void CMainFrame::onCoordinate(double x, double y, double z) {
  char buffer[255];
sprintf(buffer, "%4.2g", x);
outX->value(buffer);
sprintf(buffer, "%4.2g", y);
outZ->value(buffer);
sprintf(buffer, "%4.2g", z);
outY->value(buffer);
}

void CMainFrame::onSelectionChanged() {
  if (workspaceView->getSelection()->getSize()>0)
{
	btnMove->activate();
	btnCopy->activate();
	btnDelete->activate();
}
else
{
	btnMove->deactivate();
	btnCopy->deactivate();
	btnDelete->deactivate();
}
}
