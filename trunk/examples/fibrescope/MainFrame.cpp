// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "MainFrame.h"
static CMainFrame* g_mainFrame;
static float g_event_spacing = 1.0;
static bool g_playing = false;

void timer_callback(void * v) {
  if (g_playing)
{
	CIvfCustomWidget* widget = (CIvfCustomWidget*)v;
	widget->nextStep();
	g_mainFrame->sldTimeStep->value(widget->getTimeStep());
}
Fl::add_timeout(g_event_spacing, timer_callback, v);
}

void idle_callback(void* p) {
  CIvfCustomWidget* widget = (CIvfCustomWidget*)p;
widget->nextStep();
}

inline void CMainFrame::cb_wndMain_i(Fl_Double_Window*, void*) {
  wndMain->hide();
}
void CMainFrame::cb_wndMain(Fl_Double_Window* o, void* v) {
  ((CMainFrame*)(o->user_data()))->cb_wndMain_i(o,v);
}

inline void CMainFrame::cb_mnuNew_i(Fl_Menu_*, void*) {
  ivfCustomWidget->clearAll();
}
void CMainFrame::cb_mnuNew(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuNew_i(o,v);
}

inline void CMainFrame::cb_mnuFileOpen_i(Fl_Menu_*, void*) {
  ivfCustomWidget->open();
inpScaleFactor->value(ivfCustomWidget->getScaling());
sldTimeStep->maximum(ivfCustomWidget->getSteps()-1);
sldFogNear->value(ivfCustomWidget->getFogNear());
sldFogFar->value(ivfCustomWidget->getFogFar());
sldScale->value(ivfCustomWidget->getScaleFactor());
sldConnectionSize->value(ivfCustomWidget->getConnectionSize());
if (ivfCustomWidget->getEnlargeUsage())
	chkEnlargeUsage->value(1);
else
	chkEnlargeUsage->value(0);
}
void CMainFrame::cb_mnuFileOpen(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuFileOpen_i(o,v);
}

inline void CMainFrame::cb_mnuFileOpenCSV_i(Fl_Menu_*, void*) {
  ivfCustomWidget->openCSV();
inpScaleFactor->value(ivfCustomWidget->getScaling());
sldTimeStep->maximum(ivfCustomWidget->getSteps()-1);
sldFogNear->value(ivfCustomWidget->getFogNear());
sldFogFar->value(ivfCustomWidget->getFogFar());
sldScale->value(ivfCustomWidget->getScaleFactor());
sldConnectionSize->value(ivfCustomWidget->getConnectionSize());
if (ivfCustomWidget->getEnlargeUsage())
	chkEnlargeUsage->value(1);
else
	chkEnlargeUsage->value(0);
}
void CMainFrame::cb_mnuFileOpenCSV(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuFileOpenCSV_i(o,v);
}

inline void CMainFrame::cb_mnuFileOpenNEF_i(Fl_Menu_*, void*) {
  ivfCustomWidget->openNEF();
inpScaleFactor->value(ivfCustomWidget->getScaling());
sldTimeStep->maximum(ivfCustomWidget->getSteps()-1);
sldFogNear->value(ivfCustomWidget->getFogNear());
sldFogFar->value(ivfCustomWidget->getFogFar());
sldScale->value(ivfCustomWidget->getScaleFactor());
sldConnectionSize->value(ivfCustomWidget->getConnectionSize());
if (ivfCustomWidget->getEnlargeUsage())
	chkEnlargeUsage->value(1);
else
	chkEnlargeUsage->value(0);
}
void CMainFrame::cb_mnuFileOpenNEF(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuFileOpenNEF_i(o,v);
}

inline void CMainFrame::cb_mnuFileExit_i(Fl_Menu_*, void*) {
  wndMain->hide();
}
void CMainFrame::cb_mnuFileExit(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuFileExit_i(o,v);
}

inline void CMainFrame::cb_mnuCmHSV_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(0);
}
void CMainFrame::cb_mnuCmHSV(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmHSV_i(o,v);
}

inline void CMainFrame::cb_mnuCmHot_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(1);
}
void CMainFrame::cb_mnuCmHot(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmHot_i(o,v);
}

inline void CMainFrame::cb_mnuCmGray_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(2);
}
void CMainFrame::cb_mnuCmGray(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmGray_i(o,v);
}

inline void CMainFrame::cb_mnuCmBone_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(3);
}
void CMainFrame::cb_mnuCmBone(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmBone_i(o,v);
}

inline void CMainFrame::cb_mnuCmCopper_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(4);
}
void CMainFrame::cb_mnuCmCopper(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmCopper_i(o,v);
}

inline void CMainFrame::cb_mnuCmPink_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(5);
}
void CMainFrame::cb_mnuCmPink(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmPink_i(o,v);
}

inline void CMainFrame::cb_mnuCmWhite_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(6);
}
void CMainFrame::cb_mnuCmWhite(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmWhite_i(o,v);
}

inline void CMainFrame::cb_mnuCmFlag_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(7);
}
void CMainFrame::cb_mnuCmFlag(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmFlag_i(o,v);
}

inline void CMainFrame::cb_mnuCmLines_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(8);
}
void CMainFrame::cb_mnuCmLines(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmLines_i(o,v);
}

inline void CMainFrame::cb_mnuCmColorCube_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(9);
}
void CMainFrame::cb_mnuCmColorCube(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmColorCube_i(o,v);
}

inline void CMainFrame::cb_mnuCmJet_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(10);
}
void CMainFrame::cb_mnuCmJet(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmJet_i(o,v);
}

inline void CMainFrame::cb_mnuCmPrism_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(11);
}
void CMainFrame::cb_mnuCmPrism(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmPrism_i(o,v);
}

inline void CMainFrame::cb_mnuCmCool_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(12);
}
void CMainFrame::cb_mnuCmCool(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmCool_i(o,v);
}

inline void CMainFrame::cb_mnuCmAutumn_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(13);
}
void CMainFrame::cb_mnuCmAutumn(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmAutumn_i(o,v);
}

inline void CMainFrame::cb_mnuCmSpring_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(14);
}
void CMainFrame::cb_mnuCmSpring(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmSpring_i(o,v);
}

inline void CMainFrame::cb_mnuCmWinter_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(15);
}
void CMainFrame::cb_mnuCmWinter(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmWinter_i(o,v);
}

inline void CMainFrame::cb_mnuCmSummer_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setColorMap(16);
}
void CMainFrame::cb_mnuCmSummer(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuCmSummer_i(o,v);
}

inline void CMainFrame::cb_mnuTx1_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(0);
}
void CMainFrame::cb_mnuTx1(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx1_i(o,v);
}

inline void CMainFrame::cb_mnuTx2_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(1);
}
void CMainFrame::cb_mnuTx2(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx2_i(o,v);
}

inline void CMainFrame::cb_mnuTx3_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(2);
}
void CMainFrame::cb_mnuTx3(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx3_i(o,v);
}

inline void CMainFrame::cb_mnuTx4_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(3);
}
void CMainFrame::cb_mnuTx4(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx4_i(o,v);
}

inline void CMainFrame::cb_mnuTx5_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(4);
}
void CMainFrame::cb_mnuTx5(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx5_i(o,v);
}

inline void CMainFrame::cb_mnuTx6_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(5);
}
void CMainFrame::cb_mnuTx6(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx6_i(o,v);
}

inline void CMainFrame::cb_mnuTx7_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(6);
}
void CMainFrame::cb_mnuTx7(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx7_i(o,v);
}

inline void CMainFrame::cb_mnuTx8_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(7);
}
void CMainFrame::cb_mnuTx8(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx8_i(o,v);
}

inline void CMainFrame::cb_mnuTx9_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(8);
}
void CMainFrame::cb_mnuTx9(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx9_i(o,v);
}

inline void CMainFrame::cb_mnuTx10_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(9);
}
void CMainFrame::cb_mnuTx10(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx10_i(o,v);
}

inline void CMainFrame::cb_mnuTx11_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(10);
}
void CMainFrame::cb_mnuTx11(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx11_i(o,v);
}

inline void CMainFrame::cb_mnuTx12_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(11);
}
void CMainFrame::cb_mnuTx12(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuTx12_i(o,v);
}

inline void CMainFrame::cb_mnuExtTx1_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setTexture(12);
}
void CMainFrame::cb_mnuExtTx1(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuExtTx1_i(o,v);
}

inline void CMainFrame::cb_mnuOptionFibreNetworkBlendFibres_i(Fl_Menu_*, void*) {
  if (mnuOptionFibreNetworkBlendFibres->value()>0)
	ivfCustomWidget->setBlendFibres(true);
else
	ivfCustomWidget->setBlendFibres(false);
}
void CMainFrame::cb_mnuOptionFibreNetworkBlendFibres(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionFibreNetworkBlendFibres_i(o,v);
}

inline void CMainFrame::cb_mnuOptionFibreNetworkFibreLighting_i(Fl_Menu_*, void*) {
  if (mnuOptionFibreNetworkFibreLighting->value()>0)
	ivfCustomWidget->setFibreLighting(true);
else
	ivfCustomWidget->setFibreLighting(false);
}
void CMainFrame::cb_mnuOptionFibreNetworkFibreLighting(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionFibreNetworkFibreLighting_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsStereoNone_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setStereoMode(CIvfCustomWidget::SM_NONE);
}
void CMainFrame::cb_mnuOptionsStereoNone(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsStereoNone_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsStereoAnaglyph_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setStereoMode(CIvfCustomWidget::SM_ANAGLYPH);
}
void CMainFrame::cb_mnuOptionsStereoAnaglyph(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsStereoAnaglyph_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsStereoQuadBuffer_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setStereoMode(CIvfCustomWidget::SM_QUAD_BUFFER);
}
void CMainFrame::cb_mnuOptionsStereoQuadBuffer(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsStereoQuadBuffer_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsViewModeExaminer_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setViewMode(CIvfCustomWidget::VM_EXAMINER);
}
void CMainFrame::cb_mnuOptionsViewModeExaminer(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsViewModeExaminer_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsViewModeFly_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setViewMode(CIvfCustomWidget::VM_FLY);
}
void CMainFrame::cb_mnuOptionsViewModeFly(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsViewModeFly_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsPerfDL_i(Fl_Menu_*, void*) {
  if (mnuOptionsPerfDL->value()>0)
	ivfCustomWidget->setUseDisplayLists(true);
else
	ivfCustomWidget->setUseDisplayLists(false);
}
void CMainFrame::cb_mnuOptionsPerfDL(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsPerfDL_i(o,v);
}

inline void CMainFrame::cb_mnuOptionsPerfVFollowPath_i(Fl_Menu_*, void*) {
  if (mnuOptionsPerfVFollowPath->value()!=0)
	ivfCustomWidget->setVertexNormalFollowPath(true);
else
	ivfCustomWidget->setVertexNormalFollowPath(false);
}
void CMainFrame::cb_mnuOptionsPerfVFollowPath(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuOptionsPerfVFollowPath_i(o,v);
}

inline void CMainFrame::cb_No_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(0);
}
void CMainFrame::cb_No(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_No_i(o,v);
}

inline void CMainFrame::cb_VERTEX_FLAT_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(1);
}
void CMainFrame::cb_VERTEX_FLAT(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_VERTEX_FLAT_i(o,v);
}

inline void CMainFrame::cb_NORMAL_FLAT_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(2);
}
void CMainFrame::cb_NORMAL_FLAT(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_NORMAL_FLAT_i(o,v);
}

inline void CMainFrame::cb_VERTEX_CYL_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(3);
}
void CMainFrame::cb_VERTEX_CYL(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_VERTEX_CYL_i(o,v);
}

inline void CMainFrame::cb_NORMAL_CYL_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(4);
}
void CMainFrame::cb_NORMAL_CYL(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_NORMAL_CYL_i(o,v);
}

inline void CMainFrame::cb_VERTEX_SPH_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(5);
}
void CMainFrame::cb_VERTEX_SPH(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_VERTEX_SPH_i(o,v);
}

inline void CMainFrame::cb_NORMAL_SPH_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(6);
}
void CMainFrame::cb_NORMAL_SPH(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_NORMAL_SPH_i(o,v);
}

inline void CMainFrame::cb_VERTEX_MODEL_FLAT_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(7);
}
void CMainFrame::cb_VERTEX_MODEL_FLAT(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_VERTEX_MODEL_FLAT_i(o,v);
}

inline void CMainFrame::cb_NORMAL_MODEL_FLAT_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(8);
}
void CMainFrame::cb_NORMAL_MODEL_FLAT(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_NORMAL_MODEL_FLAT_i(o,v);
}

inline void CMainFrame::cb_VERTEX_MODEL_CYL_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(9);
}
void CMainFrame::cb_VERTEX_MODEL_CYL(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_VERTEX_MODEL_CYL_i(o,v);
}

inline void CMainFrame::cb_NORMAL_MODEL_CYL_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(10);
}
void CMainFrame::cb_NORMAL_MODEL_CYL(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_NORMAL_MODEL_CYL_i(o,v);
}

inline void CMainFrame::cb_VERTEX_MODEL_SPH_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(11);
}
void CMainFrame::cb_VERTEX_MODEL_SPH(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_VERTEX_MODEL_SPH_i(o,v);
}

inline void CMainFrame::cb_NORMAL_MODEL_SPH_i(Fl_Menu_*, void*) {
  ivfCustomWidget->setExtrusionTextureMode(12);
}
void CMainFrame::cb_NORMAL_MODEL_SPH(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_NORMAL_MODEL_SPH_i(o,v);
}

inline void CMainFrame::cb_mnuHelpAbout_i(Fl_Menu_*, void*) {
  if (m_splash!=NULL)
{
	m_splash->hide();
	delete m_splash;
}
m_splash = new CSplashFrame();
m_splash->setTimer(false);
m_splash->center();
m_splash->show();
}
void CMainFrame::cb_mnuHelpAbout(Fl_Menu_* o, void* v) {
  ((CMainFrame*)(o->parent()->user_data()))->cb_mnuHelpAbout_i(o,v);
}

Fl_Menu_Item CMainFrame::menu_mnuMain[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 12, 56},
 {"&New", 0,  (Fl_Callback*)CMainFrame::cb_mnuNew, 0, 0, 0, 0, 12, 56},
 {"&Open FIB...", 0,  (Fl_Callback*)CMainFrame::cb_mnuFileOpen, 0, 0, 0, 0, 12, 56},
 {"Open &CSV...", 0x4006f,  (Fl_Callback*)CMainFrame::cb_mnuFileOpenCSV, 0, 0, 0, 0, 12, 56},
 {"Open NEF...", 0,  (Fl_Callback*)CMainFrame::cb_mnuFileOpenNEF, 0, 128, 0, 0, 12, 56},
 {"&Exit", 0x8ffc1,  (Fl_Callback*)CMainFrame::cb_mnuFileExit, 0, 4, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Options", 0,  0, 0, 64, 0, 0, 12, 56},
 {"&Colormap", 0,  0, 0, 64, 0, 0, 12, 56},
 {"HSV", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmHSV, 0, 8, 0, 0, 12, 56},
 {"Hot", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmHot, 0, 8, 0, 0, 12, 56},
 {"Gray", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmGray, 0, 8, 0, 0, 12, 56},
 {"Bone", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmBone, 0, 8, 0, 0, 12, 56},
 {"Copper", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmCopper, 0, 8, 0, 0, 12, 56},
 {"Pink", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmPink, 0, 8, 0, 0, 12, 56},
 {"White", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmWhite, 0, 8, 0, 0, 12, 56},
 {"Flag", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmFlag, 0, 8, 0, 0, 12, 56},
 {"Lines", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmLines, 0, 8, 0, 0, 12, 56},
 {"ColorCube", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmColorCube, 0, 8, 0, 0, 12, 56},
 {"Jet", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmJet, 0, 8, 0, 0, 12, 56},
 {"Prism", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmPrism, 0, 8, 0, 0, 12, 56},
 {"Cool", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmCool, 0, 8, 0, 0, 12, 56},
 {"Autumn", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmAutumn, 0, 8, 0, 0, 12, 56},
 {"Spring", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmSpring, 0, 8, 0, 0, 12, 56},
 {"Winter", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmWinter, 0, 8, 0, 0, 12, 56},
 {"Summer", 0,  (Fl_Callback*)CMainFrame::cb_mnuCmSummer, 0, 8, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Fibre texture", 0,  0, 0, 64, 0, 0, 12, 56},
 {"&Texture 1", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx1, 0, 0, 0, 0, 12, 56},
 {"&Texture 2", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx2, 0, 0, 0, 0, 12, 56},
 {"&Texture 3", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx3, 0, 0, 0, 0, 12, 56},
 {"&Texture 4", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx4, 0, 0, 0, 0, 12, 56},
 {"&Texture 5", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx5, 0, 0, 0, 0, 12, 56},
 {"&Texture 6", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx6, 0, 0, 0, 0, 12, 56},
 {"&Texture 7", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx7, 0, 0, 0, 0, 12, 56},
 {"&Texture 8", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx8, 0, 0, 0, 0, 12, 56},
 {"&Texture 9", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx9, 0, 0, 0, 0, 12, 56},
 {"&Texture 10", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx10, 0, 0, 0, 0, 12, 56},
 {"&Texture 11", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx11, 0, 0, 0, 0, 12, 56},
 {"&Texture 12", 0,  (Fl_Callback*)CMainFrame::cb_mnuTx12, 0, 128, 0, 0, 12, 56},
 {"Extr. Texture 1", 0,  (Fl_Callback*)CMainFrame::cb_mnuExtTx1, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Fibre network", 0,  0, 0, 64, 0, 0, 12, 56},
 {"Blend fibres (Additive)", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionFibreNetworkBlendFibres, 0, 2, 0, 0, 12, 56},
 {"Fibre lighting", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionFibreNetworkFibreLighting, 0, 6, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Stereo options", 0,  0, 0, 64, 0, 0, 12, 56},
 {"None", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsStereoNone, 0, 12, 0, 0, 12, 56},
 {"Anaglyph", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsStereoAnaglyph, 0, 8, 0, 0, 12, 56},
 {"Quad buffered", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsStereoQuadBuffer, 0, 8, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Viewing", 0,  0, 0, 64, 0, 0, 12, 56},
 {"Examiner", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsViewModeExaminer, 0, 0, 0, 0, 14, 56},
 {"Fly", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsViewModeFly, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Performance", 0,  0, 0, 64, 0, 0, 12, 56},
 {"Use Display Lists", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsPerfDL, 0, 2, 0, 0, 12, 56},
 {"Vertex normal follow path", 0,  (Fl_Callback*)CMainFrame::cb_mnuOptionsPerfVFollowPath, 0, 2, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Extrusion texture mode", 0,  0, 0, 64, 0, 0, 12, 56},
 {"No texture", 0,  (Fl_Callback*)CMainFrame::cb_No, 0, 140, 0, 0, 12, 56},
 {"VERTEX_FLAT", 0,  (Fl_Callback*)CMainFrame::cb_VERTEX_FLAT, 0, 8, 0, 0, 12, 56},
 {"NORMAL_FLAT", 0,  (Fl_Callback*)CMainFrame::cb_NORMAL_FLAT, 0, 8, 0, 0, 12, 56},
 {"VERTEX_CYL", 0,  (Fl_Callback*)CMainFrame::cb_VERTEX_CYL, 0, 8, 0, 0, 12, 56},
 {"NORMAL_CYL", 0,  (Fl_Callback*)CMainFrame::cb_NORMAL_CYL, 0, 8, 0, 0, 12, 56},
 {"VERTEX_SPH", 0,  (Fl_Callback*)CMainFrame::cb_VERTEX_SPH, 0, 8, 0, 0, 12, 56},
 {"NORMAL_SPH", 0,  (Fl_Callback*)CMainFrame::cb_NORMAL_SPH, 0, 8, 0, 0, 12, 56},
 {"VERTEX_MODEL_FLAT", 0,  (Fl_Callback*)CMainFrame::cb_VERTEX_MODEL_FLAT, 0, 8, 0, 0, 12, 56},
 {"NORMAL_MODEL_FLAT", 0,  (Fl_Callback*)CMainFrame::cb_NORMAL_MODEL_FLAT, 0, 8, 0, 0, 12, 56},
 {"VERTEX_MODEL_CYL", 0,  (Fl_Callback*)CMainFrame::cb_VERTEX_MODEL_CYL, 0, 8, 0, 0, 12, 56},
 {"NORMAL_MODEL_CYL", 0,  (Fl_Callback*)CMainFrame::cb_NORMAL_MODEL_CYL, 0, 8, 0, 0, 12, 56},
 {"VERTEX_MODEL_SPH", 0,  (Fl_Callback*)CMainFrame::cb_VERTEX_MODEL_SPH, 0, 8, 0, 0, 12, 56},
 {"NORMAL_MODEL_SPH", 0,  (Fl_Callback*)CMainFrame::cb_NORMAL_MODEL_SPH, 0, 8, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, 0, 0, 12, 56},
 {"&About FibreScope...", 0,  (Fl_Callback*)CMainFrame::cb_mnuHelpAbout, 0, 0, 0, 0, 12, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* CMainFrame::mnuFile = CMainFrame::menu_mnuMain + 0;
Fl_Menu_Item* CMainFrame::mnuNew = CMainFrame::menu_mnuMain + 1;
Fl_Menu_Item* CMainFrame::mnuFileOpen = CMainFrame::menu_mnuMain + 2;
Fl_Menu_Item* CMainFrame::mnuFileOpenCSV = CMainFrame::menu_mnuMain + 3;
Fl_Menu_Item* CMainFrame::mnuFileOpenNEF = CMainFrame::menu_mnuMain + 4;
Fl_Menu_Item* CMainFrame::mnuFileExit = CMainFrame::menu_mnuMain + 5;
Fl_Menu_Item* CMainFrame::mnuOptions = CMainFrame::menu_mnuMain + 7;
Fl_Menu_Item* CMainFrame::mnuColorMap = CMainFrame::menu_mnuMain + 8;
Fl_Menu_Item* CMainFrame::mnuCmHSV = CMainFrame::menu_mnuMain + 9;
Fl_Menu_Item* CMainFrame::mnuCmHot = CMainFrame::menu_mnuMain + 10;
Fl_Menu_Item* CMainFrame::mnuCmGray = CMainFrame::menu_mnuMain + 11;
Fl_Menu_Item* CMainFrame::mnuCmBone = CMainFrame::menu_mnuMain + 12;
Fl_Menu_Item* CMainFrame::mnuCmCopper = CMainFrame::menu_mnuMain + 13;
Fl_Menu_Item* CMainFrame::mnuCmPink = CMainFrame::menu_mnuMain + 14;
Fl_Menu_Item* CMainFrame::mnuCmWhite = CMainFrame::menu_mnuMain + 15;
Fl_Menu_Item* CMainFrame::mnuCmFlag = CMainFrame::menu_mnuMain + 16;
Fl_Menu_Item* CMainFrame::mnuCmLines = CMainFrame::menu_mnuMain + 17;
Fl_Menu_Item* CMainFrame::mnuCmColorCube = CMainFrame::menu_mnuMain + 18;
Fl_Menu_Item* CMainFrame::mnuCmJet = CMainFrame::menu_mnuMain + 19;
Fl_Menu_Item* CMainFrame::mnuCmPrism = CMainFrame::menu_mnuMain + 20;
Fl_Menu_Item* CMainFrame::mnuCmCool = CMainFrame::menu_mnuMain + 21;
Fl_Menu_Item* CMainFrame::mnuCmAutumn = CMainFrame::menu_mnuMain + 22;
Fl_Menu_Item* CMainFrame::mnuCmSpring = CMainFrame::menu_mnuMain + 23;
Fl_Menu_Item* CMainFrame::mnuCmWinter = CMainFrame::menu_mnuMain + 24;
Fl_Menu_Item* CMainFrame::mnuCmSummer = CMainFrame::menu_mnuMain + 25;
Fl_Menu_Item* CMainFrame::mnuTexture = CMainFrame::menu_mnuMain + 27;
Fl_Menu_Item* CMainFrame::mnuTx1 = CMainFrame::menu_mnuMain + 28;
Fl_Menu_Item* CMainFrame::mnuTx2 = CMainFrame::menu_mnuMain + 29;
Fl_Menu_Item* CMainFrame::mnuTx3 = CMainFrame::menu_mnuMain + 30;
Fl_Menu_Item* CMainFrame::mnuTx4 = CMainFrame::menu_mnuMain + 31;
Fl_Menu_Item* CMainFrame::mnuTx5 = CMainFrame::menu_mnuMain + 32;
Fl_Menu_Item* CMainFrame::mnuTx6 = CMainFrame::menu_mnuMain + 33;
Fl_Menu_Item* CMainFrame::mnuTx7 = CMainFrame::menu_mnuMain + 34;
Fl_Menu_Item* CMainFrame::mnuTx8 = CMainFrame::menu_mnuMain + 35;
Fl_Menu_Item* CMainFrame::mnuTx9 = CMainFrame::menu_mnuMain + 36;
Fl_Menu_Item* CMainFrame::mnuTx10 = CMainFrame::menu_mnuMain + 37;
Fl_Menu_Item* CMainFrame::mnuTx11 = CMainFrame::menu_mnuMain + 38;
Fl_Menu_Item* CMainFrame::mnuTx12 = CMainFrame::menu_mnuMain + 39;
Fl_Menu_Item* CMainFrame::mnuExtTx1 = CMainFrame::menu_mnuMain + 40;
Fl_Menu_Item* CMainFrame::mnuOptionsFibreNetwork = CMainFrame::menu_mnuMain + 42;
Fl_Menu_Item* CMainFrame::mnuOptionFibreNetworkBlendFibres = CMainFrame::menu_mnuMain + 43;
Fl_Menu_Item* CMainFrame::mnuOptionFibreNetworkFibreLighting = CMainFrame::menu_mnuMain + 44;
Fl_Menu_Item* CMainFrame::mnuOptionsStereo = CMainFrame::menu_mnuMain + 46;
Fl_Menu_Item* CMainFrame::mnuOptionsStereoNone = CMainFrame::menu_mnuMain + 47;
Fl_Menu_Item* CMainFrame::mnuOptionsStereoAnaglyph = CMainFrame::menu_mnuMain + 48;
Fl_Menu_Item* CMainFrame::mnuOptionsStereoQuadBuffer = CMainFrame::menu_mnuMain + 49;
Fl_Menu_Item* CMainFrame::mnuOptionsViewMode = CMainFrame::menu_mnuMain + 51;
Fl_Menu_Item* CMainFrame::mnuOptionsViewModeExaminer = CMainFrame::menu_mnuMain + 52;
Fl_Menu_Item* CMainFrame::mnuOptionsViewModeFly = CMainFrame::menu_mnuMain + 53;
Fl_Menu_Item* CMainFrame::mnuOptionsPerf = CMainFrame::menu_mnuMain + 55;
Fl_Menu_Item* CMainFrame::mnuOptionsPerfDL = CMainFrame::menu_mnuMain + 56;
Fl_Menu_Item* CMainFrame::mnuOptionsPerfVFollowPath = CMainFrame::menu_mnuMain + 57;
Fl_Menu_Item* CMainFrame::mnuOptionsExtrTextureMode = CMainFrame::menu_mnuMain + 59;
Fl_Menu_Item* CMainFrame::mnuHelp = CMainFrame::menu_mnuMain + 75;
Fl_Menu_Item* CMainFrame::mnuHelpAbout = CMainFrame::menu_mnuMain + 76;

inline void CMainFrame::cb_sldTimeStep_i(Fl_Value_Slider*, void*) {
  ivfCustomWidget->setTimeStep((double)sldTimeStep->value());
}
void CMainFrame::cb_sldTimeStep(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldTimeStep_i(o,v);
}

inline void CMainFrame::cb_btnPlay_i(Fl_HoverButton*, void*) {
  if (btnPlay->value()==1)
	g_playing = true;
else
	g_playing = false;
}
void CMainFrame::cb_btnPlay(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnPlay_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_tlRun[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c None",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaabaaaaaaaaaaaa",
"aaaaafbaaaaaaaaaaa",
"aaaaabfbaaaaaaaaaa",
"aaaaafbfbaaaaaaaaa",
"aaaaabfbfbaaaaaaaa",
"aaaaafbfbfbaaaaaaa",
"aaaaabfbfbfbaaaaaa",
"aaaaafbfbfbfbaaaaa",
"aaaaabfbfbfb`aaaaa",
"aaaaafbfbfb`aaaaaa",
"aaaaabfbfb`aaaaaaa",
"aaaaafbfb`aaaaaaaa",
"aaaaabfb`aaaaaaaaa",
"aaaaafb`aaaaaaaaaa",
"aaaaab`aaaaaaaaaaa",
"aaaaa`aaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlRun(idata_tlRun);

inline void CMainFrame::cb_btnStop_i(Fl_HoverButton*, void*) {
  g_playing = false;
btnPlay->value(0);
}
void CMainFrame::cb_btnStop(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnStop_i(o,v);
}

static const char *idata_tlPause[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c none",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaabfbfaaabfbfaaaa",
"aaafbfbaaafbfbaaaa",
"aaa````aaa````aaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlPause(idata_tlPause);

inline void CMainFrame::cb_sldSpeed_i(Fl_Value_Slider*, void*) {
  g_event_spacing = sldSpeed->value();
}
void CMainFrame::cb_sldSpeed(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldSpeed_i(o,v);
}

inline void CMainFrame::cb_btnRewind_i(Fl_HoverButton*, void*) {
  ivfCustomWidget->rewind();
}
void CMainFrame::cb_btnRewind(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnRewind_i(o,v);
}

static const char *idata_tlFirst[] = {
"    18    18        4            1",
"` c #000000",
". c #000081",
"# c none",
"a c #818181",
"##################",
"##a.a.########.###",
"##.a.a#######.a###",
"##a.a.######.a.###",
"##.a.a#####.a.a###",
"##a.a.####.a.a.###",
"##.a.a###.a.a.a###",
"##a.a.##.a.a.a.###",
"##.a.a#.a.a.a.a###",
"##a.a.#`.a.a.a.###",
"##.a.a##`.a.a.a###",
"##a.a.###`.a.a.###",
"##.a.a####`.a.a###",
"##a.a.#####`.a.###",
"##.a.a######`.a###",
"##a.a.#######`.###",
"##````########`###",
"##################"
};
static Fl_Pixmap image_tlFirst(idata_tlFirst);

inline void CMainFrame::cb_btnLast_i(Fl_HoverButton*, void*) {
  ivfCustomWidget->last();
}
void CMainFrame::cb_btnLast(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnLast_i(o,v);
}

static const char *idata_tlLast[] = {
"    18    18        4            1",
"` c #000000",
". c #000081",
"# c none",
"a c #818181",
"##################",
"##.########.a.a###",
"##a.#######a.a.###",
"##.a.######.a.a###",
"##a.a.#####a.a.###",
"##.a.a.####.a.a###",
"##a.a.a.###a.a.###",
"##.a.a.a.##.a.a###",
"##a.a.a.a.#a.a.###",
"##.a.a.a.`#.a.a###",
"##a.a.a.`##a.a.###",
"##.a.a.`###.a.a###",
"##a.a.`####a.a.###",
"##.a.`#####.a.a###",
"##a.`######a.a.###",
"##.`#######.a.a###",
"##`########````###",
"##################"
};
static Fl_Pixmap image_tlLast(idata_tlLast);

inline void CMainFrame::cb_chkLoop_i(Fl_HoverButton*, void*) {
  if (chkLoop->value()==1)
	ivfCustomWidget->setLoop(true);
else
	ivfCustomWidget->setLoop(false);
}
void CMainFrame::cb_chkLoop(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_chkLoop_i(o,v);
}

static const char *idata_tlLoop[] = {
"    18    18        4            1",
"` c #000000",
". c #000081",
"# c none",
"a c #818181",
"##################",
"##################",
"#a###a.a.a.a.a####",
"#.a#a.a.a.a.a.a###",
"#a.a.a```````a.a##",
"#.a.a`#######`a.##",
"#a.a.a########``##",
"#.a.a.a###########",
"#``````###########",
"##################",
"##########.a.a.a##",
"###########.a.a.##",
"#a.#########.a.a##",
"#.a.#######.a.a.##",
"#`.a.a.a.a.a.`.a##",
"##`.a.a.a.a.`#`.##",
"###`````````###`##",
"##################"
};
static Fl_Pixmap image_tlLoop(idata_tlLoop);

inline void CMainFrame::cb_chkForwardBack_i(Fl_HoverButton*, void*) {
  if (chkForwardBack->value()==1)
	ivfCustomWidget->setReverse(true);
else
	ivfCustomWidget->setReverse(false);
}
void CMainFrame::cb_chkForwardBack(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_chkForwardBack_i(o,v);
}

static const char *idata_tlForwardBack[] = {
"    18    18        4            1",
"` c #000000",
". c #000081",
"# c none",
"a c #818181",
"##################",
"#a.###.###########",
"#.a##.a###########",
"#a.#.a.###########",
"#.a.a.a.a.a.a.a.a#",
"#a.a.a.a.a.a.a.a.#",
"#.a`a.a``````````#",
"#a.#`a.###########",
"#.a##`a###########",
"#``###`####.###.a#",
"###########a.##a.#",
"###########.a.#.a#",
"#a.a.a.a.a.a.a.a.#",
"#.a.a.a.a.a.a.a.a#",
"#``````````a.a`a.#",
"###########.a`#.a#",
"###########a`##a.#",
"###########`###``#"
};
static Fl_Pixmap image_tlForwardBack(idata_tlForwardBack);

inline void CMainFrame::cb_btnShowConnections_i(Fl_HoverButton*, void*) {
  if (btnShowConnections->value()==1)
	ivfCustomWidget->setShowConnections(true);
else
	ivfCustomWidget->setShowConnections(false);
}
void CMainFrame::cb_btnShowConnections(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnShowConnections_i(o,v);
}

static const char *idata_tlConnections[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c none",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaiiaaaaaaaaaa",
"aaaaaimiiaaaaaaaaa",
"aaaaaiiiiggaaaaaaa",
"aaaaagii``ggggaaaa",
"aaaagg``aa```gggga",
"aaaag`aaaaaaa```ga",
"aaaggaaaaaaaaaaa`a",
"aaag`aaaaaaaaaaaaa",
"aaggaaaaaaaaaaaaaa",
"aag`aaaaaaaaaaaaaa",
"aa`aaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlConnections(idata_tlConnections);

inline void CMainFrame::cb_btnShowUsage_i(Fl_HoverButton*, void*) {
  if (btnShowUsage->value()==1)
	ivfCustomWidget->setShowUsage(true);
else
	ivfCustomWidget->setShowUsage(false);
}
void CMainFrame::cb_btnShowUsage(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnShowUsage_i(o,v);
}

static const char *idata_tlUsage[] = {
"    18    18       16            1",
"` c #400000",
". c #650000",
"# c #8d0000",
"a c #b20000",
"b c #da0000",
"c c #ff0000",
"d c #ff3000",
"e c #ff6500",
"f c none",
"g c #ff9900",
"h c #ffce00",
"i c #ffff00",
"j c #ffff30",
"k c #ffff65",
"l c #ffff99",
"m c #ffffce",
"ffffffffffffffffff",
"ffffmmmmmmmmmmffff",
"ffffllllllllllffff",
"ffffkkkkkkkkkkffff",
"ffffjjjjjjjjjjffff",
"ffffiiiiiiiiiiffff",
"ffffhhhhhhhhhhffff",
"ffffggggggggggffff",
"ffffeeeeeeeeeeffff",
"ffffddddddddddffff",
"ffffccccccccccffff",
"ffffbbbbbbbbbbffff",
"ffffaaaaaaaaaaffff",
"ffff##########ffff",
"ffff..........ffff",
"ffff``````````ffff",
"ffffffffffffffffff",
"ffffffffffffffffff"
};
static Fl_Pixmap image_tlUsage(idata_tlUsage);

inline void CMainFrame::cb_btnShowDiagram_i(Fl_HoverButton*, void*) {
  if (btnShowDiagram->value()==1)
	ivfCustomWidget->setShowStressDiagram(true);
else
	ivfCustomWidget->setShowStressDiagram(false);
}
void CMainFrame::cb_btnShowDiagram(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnShowDiagram_i(o,v);
}

static const char *idata_tlDiagram[] = {
"    18    18        4            1",
"` c #400000",
". c #000081",
"# c #c20000",
"a c none",
"aaaaaaaaaaaaaaaaaa",
"aa.aaaaaaaaaaaaaaa",
"a...aaaaaaaaaaaaaa",
".`.`.aaaaaaaaaaaaa",
"`a.a`aaaa######aaa",
"aa.aaaa##``````aaa",
"aa.aaa#``aaaaaaaaa",
"aa.aa#`aaaaaaaaaaa",
"aa.a#`aaaaaaaaaaaa",
"aa.#`aaaaaaaaaaaaa",
"aa.`aaaaaaaaaaaaaa",
"aa.aaaaaaaaaaaaaaa",
"aa.aaaaaaaaaaaaaaa",
"aa.aaaaaaaaaa.aaaa",
"aa.aaaaaaaaaaa.aaa",
"aa..............aa",
"aa````````````.`aa",
"aaaaaaaaaaaaa.`aaa"
};
static Fl_Pixmap image_tlDiagram(idata_tlDiagram);

inline void CMainFrame::cb_btnOpen_i(Fl_HoverButton*, void*) {
  ivfCustomWidget->open();
inpScaleFactor->value(ivfCustomWidget->getScaling());
sldTimeStep->maximum(ivfCustomWidget->getSteps()-1);
sldFogNear->value(ivfCustomWidget->getFogNear());
sldFogFar->value(ivfCustomWidget->getFogFar());
sldScale->value(ivfCustomWidget->getScaleFactor());
}
void CMainFrame::cb_btnOpen(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnOpen_i(o,v);
}

static const char *idata_tlOpen[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c None",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaa```aaaaa",
"aaaaaaaaa`aaa`a`aa",
"aaaaaaaaaaaaaa``aa",
"aa```aaaaaaaa```aa",
"a`imi```````aaaaaa",
"a`mimimimim`aaaaaa",
"a`imimimimi`aaaaaa",
"a`mimi``````````aa",
"a`imi`fffffffff`aa",
"a`mi`fffffffff`aaa",
"a`i`fffffffff`aaaa",
"a``fffffffff`aaaaa",
"a```````````aaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlOpen(idata_tlOpen);

inline void CMainFrame::cb_btnFullScreen_i(Fl_HoverButton*, void*) {
  ivfCustomWidget->enableFullscreen();
}
void CMainFrame::cb_btnFullScreen(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnFullScreen_i(o,v);
}

static const char *idata_tlFullscreen[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c none",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"abbbbbbbbbbbbbbbba",
"abaaaaaaaaaaaaaaba",
"ababbbaaaaaabbbaba",
"ababbaaaaaaaabbaba",
"abababaaaaaabababa",
"abaaaabaaaabaaaaba",
"abaaaaaaaaaaaaaaba",
"abaaaaaaaaaaaaaaba",
"abaaaaaaaaaaaaaaba",
"abaaaaaaaaaaaaaaba",
"abaaaabaaaabaaaaba",
"abababaaaaaabababa",
"ababbaaaaaaaabbaba",
"ababbbaaaaaabbbaba",
"abaaaaaaaaaaaaaaba",
"abbbbbbbbbbbbbbbba",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlFullscreen(idata_tlFullscreen);

inline void CMainFrame::cb_sldFogNear_i(Fl_Value_Slider*, void*) {
  ivfCustomWidget->setFogNear((double)sldFogNear->value());
}
void CMainFrame::cb_sldFogNear(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldFogNear_i(o,v);
}

inline void CMainFrame::cb_sldFogFar_i(Fl_Value_Slider*, void*) {
  ivfCustomWidget->setFogFar((double)sldFogFar->value());
}
void CMainFrame::cb_sldFogFar(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldFogFar_i(o,v);
}

inline void CMainFrame::cb_btnViewZoom_i(Fl_HoverButton*, void*) {
  btnViewPan->value(0);
}
void CMainFrame::cb_btnViewZoom(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnViewZoom_i(o,v);
}

static const char *idata_tlViewZoom[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c None",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaabbbaa",
"aaaaaabbbbaaaaabaa",
"aaaaaaabbbaaaabaaa",
"aaaaaabbbaaaabaaaa",
"aaaaabbabaaaabbbaa",
"aaaaabaaaaaaaaaaaa",
"aaaabbaaaaaaaaaaaa",
"aaaabaaaaaaaaaaaaa",
"abaabaaaaaaaabbaaa",
"abbabaaaaaabbbbaaa",
"aabbbaaaaaaabbbaaa",
"aaabbbaaaabbbabaaa",
"aaaaabbbbbbaaaaaaa",
"aaaaabbaaaaaaaaaaa",
"aaaaaabbaaaaaaaaaa",
"aaaaaaabbaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlViewZoom(idata_tlViewZoom);

inline void CMainFrame::cb_btnViewPan_i(Fl_HoverButton*, void*) {
  btnViewZoom->value(0);
}
void CMainFrame::cb_btnViewPan(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnViewPan_i(o,v);
}

static const char *idata_tlViewPan[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c None",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaabbbaa",
"aaaaaabbbbaaababaa",
"aaaaaaabbbaaabbbaa",
"aaaaaabbbaaaabaaaa",
"aaaaabbabaaaabaaaa",
"aaaaabaaaaaaaaaaaa",
"aaaabbaaaaaaaaaaaa",
"aaaabaaaaaaaaaaaaa",
"abaabaaaaaaaabbaaa",
"abbabaaaaaabbbbaaa",
"aabbbaaaaaaabbbaaa",
"aaabbbaaaabbbabaaa",
"aaaaabbbbbbaaaaaaa",
"aaaaabbaaaaaaaaaaa",
"aaaaaabbaaaaaaaaaa",
"aaaaaaabbaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlViewPan(idata_tlViewPan);

inline void CMainFrame::cb_btnStoreCamera_i(Fl_HoverButton*, void*) {
  ivfCustomWidget->storeCamera();
}
void CMainFrame::cb_btnStoreCamera(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnStoreCamera_i(o,v);
}

static const char *idata_tlExport[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c None",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaammmmaaaa",
"aaaaaaaammmmmmmmaa",
"aaaaaabmmmmmmmmmma",
"aaaaaabbmmmmmmmmfa",
"abbbbbbbbemmmmfffa",
"abbbbbbbbbeeeeeffa",
"abbbbbbbbffeeefffa",
"aaffffbbffeeeeeffa",
"aaaaaabffeeeeefffa",
"aaaaaaafmmeeeeeffa",
"aaaaaaammeeeeefffa",
"aaaaaaaammeeeeefaa",
"aaaaaaaaaaeeeeaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlExport(idata_tlExport);

inline void CMainFrame::cb_btnLoadCamera_i(Fl_HoverButton*, void*) {
  ivfCustomWidget->loadCamera();
}
void CMainFrame::cb_btnLoadCamera(Fl_HoverButton* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnLoadCamera_i(o,v);
}

static const char *idata_tlImport[] = {
"    18    18       16            1",
"` c #000000",
". c #800000",
"# c #008000",
"a c None",
"b c #000080",
"c c #800080",
"d c #008080",
"e c #c0c0c0",
"f c #808080",
"g c #ff0000",
"h c #00ff00",
"i c #ffff00",
"j c #0000ff",
"k c #ff00ff",
"l c #00ffff",
"m c #ffffff",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaammmmaaaa",
"aaaaaaaammmmmmmmaa",
"aaaabaammmmmmmmmma",
"aaabbaammmmmmmmmfa",
"aabbbbbbbbmmmmfffa",
"abbbbbbbbbfeeeeffa",
"aabbbbbbbbfeeefffa",
"aaabbffffffeeeeffa",
"aaaabfammeeeeefffa",
"aaaaafammmeeeeeffa",
"aaaaaaammeeeeefffa",
"aaaaaaaammeeeeefaa",
"aaaaaaaaaaeeeeaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa",
"aaaaaaaaaaaaaaaaaa"
};
static Fl_Pixmap image_tlImport(idata_tlImport);

inline void CMainFrame::cb_btnApplyScale_i(Fl_Button*, void*) {
  ivfCustomWidget->setScaling((double)inpScaleFactor->value());
}
void CMainFrame::cb_btnApplyScale(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnApplyScale_i(o,v);
}

inline void CMainFrame::cb_btnRed_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(0);
}
void CMainFrame::cb_btnRed(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnRed_i(o,v);
}

inline void CMainFrame::cb_btnGreen_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(1);
}
void CMainFrame::cb_btnGreen(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnGreen_i(o,v);
}

inline void CMainFrame::cb_btnWhite_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(2);
}
void CMainFrame::cb_btnWhite(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnWhite_i(o,v);
}

inline void CMainFrame::cb_btnBlue_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(3);
}
void CMainFrame::cb_btnBlue(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnBlue_i(o,v);
}

inline void CMainFrame::cb_btnYellow_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(4);
}
void CMainFrame::cb_btnYellow(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnYellow_i(o,v);
}

inline void CMainFrame::cb_btnCyan_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(5);
}
void CMainFrame::cb_btnCyan(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnCyan_i(o,v);
}

inline void CMainFrame::cb_sldScale_i(Fl_Value_Slider*, void*) {
  ivfCustomWidget->setScaleFactor((double)sldScale->value());
}
void CMainFrame::cb_sldScale(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldScale_i(o,v);
}

inline void CMainFrame::cb_btnGray1_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(6);
}
void CMainFrame::cb_btnGray1(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnGray1_i(o,v);
}

inline void CMainFrame::cb_btnGray2_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(7);
}
void CMainFrame::cb_btnGray2(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnGray2_i(o,v);
}

inline void CMainFrame::cb_btnGray3_i(Fl_Button*, void*) {
  ivfCustomWidget->setColor(8);
}
void CMainFrame::cb_btnGray3(Fl_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_btnGray3_i(o,v);
}

inline void CMainFrame::cb_sldConnectionSize_i(Fl_Value_Slider*, void*) {
  ivfCustomWidget->setConnectionSize((double)sldConnectionSize->value());
}
void CMainFrame::cb_sldConnectionSize(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldConnectionSize_i(o,v);
}

inline void CMainFrame::cb_chkEnlargeUsage_i(Fl_Check_Button*, void*) {
  if (chkEnlargeUsage->value()==1)
	ivfCustomWidget->setEnlargeUsage(true);
else
	ivfCustomWidget->setEnlargeUsage(false);
}
void CMainFrame::cb_chkEnlargeUsage(Fl_Check_Button* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_chkEnlargeUsage_i(o,v);
}

inline void CMainFrame::cb_cntSectionSides_i(Fl_Counter*, void*) {
  ivfCustomWidget->setSectionSides(cntSectionSides->value());
}
void CMainFrame::cb_cntSectionSides(Fl_Counter* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_cntSectionSides_i(o,v);
}

inline void CMainFrame::cb_cntRenderingInterval_i(Fl_Counter*, void*) {
  ivfCustomWidget->setRenderingInterval(cntRenderingInterval->value());
}
void CMainFrame::cb_cntRenderingInterval(Fl_Counter* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_cntRenderingInterval_i(o,v);
}

inline void CMainFrame::cb_cntTexScale_i(Fl_Counter*, void*) {
  ivfCustomWidget->setTextureScale(cntTexScale->value());
}
void CMainFrame::cb_cntTexScale(Fl_Counter* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_cntTexScale_i(o,v);
}

inline void CMainFrame::cb_sldBreakageLimit_i(Fl_Value_Slider*, void*) {
  ivfCustomWidget->setBreakageLimit((double)sldBreakageLimit->value());
}
void CMainFrame::cb_sldBreakageLimit(Fl_Value_Slider* o, void* v) {
  ((CMainFrame*)(o->parent()->parent()->user_data()))->cb_sldBreakageLimit_i(o,v);
}

CMainFrame::CMainFrame() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = wndMain = new Fl_Double_Window(684, 557, "FibreScope - version 1.2");
    w = o;
    o->callback((Fl_Callback*)cb_wndMain, (void*)(this));
    o->when(FL_WHEN_CHANGED);
    { Fl_Menu_Bar* o = mnuMain = new Fl_Menu_Bar(0, 0, 656, 26);
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->menu(menu_mnuMain);
    }
    { CIvfCustomWidget* o = ivfCustomWidget = new CIvfCustomWidget(33, 58, 559, 469);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_CHANGED);
      Fl_Group::current()->resizable(o);
    }
    { Fl_Scroll* o = scrTop = new Fl_Scroll(0, 25, 683, 32);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Value_Slider* o = sldTimeStep = new Fl_Value_Slider(224, 30, 135, 22, "Step");
        o->type(5);
        o->labelsize(10);
        o->maximum(100);
        o->step(1);
        o->callback((Fl_Callback*)cb_sldTimeStep);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_HoverButton* o = btnPlay = new Fl_HoverButton(61, 29, 25, 25);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlRun);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnPlay);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnStop = new Fl_HoverButton(86, 29, 25, 25);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlPause);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnStop);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Slider* o = sldSpeed = new Fl_Value_Slider(404, 30, 125, 22, "Delay");
        o->type(5);
        o->labelsize(10);
        o->minimum(0.01);
        o->value(1);
        o->callback((Fl_Callback*)cb_sldSpeed);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_HoverButton* o = btnRewind = new Fl_HoverButton(36, 29, 25, 25);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlFirst);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnRewind);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnLast = new Fl_HoverButton(111, 29, 25, 25);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlLast);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnLast);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = chkLoop = new Fl_HoverButton(143, 29, 25, 25);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlLoop);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_chkLoop);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = chkForwardBack = new Fl_HoverButton(168, 29, 25, 25);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlForwardBack);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_chkForwardBack);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnShowConnections = new Fl_HoverButton(535, 30, 23, 22);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->value(1);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlConnections);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnShowConnections);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnShowUsage = new Fl_HoverButton(558, 30, 22, 22);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlUsage);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnShowUsage);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnShowDiagram = new Fl_HoverButton(580, 30, 22, 22);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->value(1);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlDiagram);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnShowDiagram);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnOpen = new Fl_HoverButton(5, 29, 25, 25);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlOpen);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnOpen);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnFullScreen = new Fl_HoverButton(603, 30, 22, 22);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlFullscreen);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnFullScreen);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
    }
    { Fl_Scroll* o = scrLeft = new Fl_Scroll(0, 55, 33, 474);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Value_Slider* o = sldFogNear = new Fl_Value_Slider(5, 92, 23, 115, "Near");
        o->type(4);
        o->labelsize(10);
        o->minimum(5);
        o->maximum(2000);
        o->step(1);
        o->value(150);
        o->callback((Fl_Callback*)cb_sldFogNear);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Box* o = lblFog = new Fl_Box(5, 59, 25, 20, "Fog");
        o->labelsize(10);
      }
      { Fl_Value_Slider* o = sldFogFar = new Fl_Value_Slider(5, 228, 23, 115, "Far");
        o->type(4);
        o->labelsize(10);
        o->minimum(5);
        o->maximum(2000);
        o->step(1);
        o->value(300);
        o->callback((Fl_Callback*)cb_sldFogFar);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_HoverButton* o = btnViewZoom = new Fl_HoverButton(4, 350, 25, 25);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->value(1);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlViewZoom);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnViewZoom);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnViewPan = new Fl_HoverButton(4, 375, 25, 25);
        o->type(1);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlViewPan);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(12);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnViewPan);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnStoreCamera = new Fl_HoverButton(4, 405, 25, 24);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlExport);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnStoreCamera);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_HoverButton* o = btnLoadCamera = new Fl_HoverButton(4, 429, 25, 24);
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->image(image_tlImport);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)cb_btnLoadCamera);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
    }
    { Fl_Scroll* o = scrBottom = new Fl_Scroll(0, 527, 683, 30);
      o->box(FL_ENGRAVED_BOX);
      o->labelsize(12);
      { Fl_Value_Input* o = inpScaleFactor = new Fl_Value_Input(76, 532, 88, 20, "Scalefactor:");
        o->labelsize(10);
        o->minimum(-1e+300);
        o->maximum(1e+300);
        o->textsize(10);
      }
      { Fl_Button* o = btnApplyScale = new Fl_Button(168, 532, 44, 20, "Apply");
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_THIN_DOWN_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_btnApplyScale);
      }
      { Fl_Slider* o = sldProgress = new Fl_Slider(456, 533, 156, 19);
        o->type(3);
        o->labelsize(10);
        o->align(FL_ALIGN_CENTER);
      }
      { Fl_Output* o = outMessage = new Fl_Output(224, 533, 224, 19);
        o->color(FL_SELECTION_COLOR);
        o->labelsize(10);
        o->textsize(10);
      }
      o->end();
    }
    { Fl_Scroll* o = scrRight = new Fl_Scroll(593, 55, 90, 474);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Button* o = btnRed = new Fl_Button(598, 60, 25, 25);
        o->color(FL_RED);
        o->callback((Fl_Callback*)cb_btnRed);
      }
      { Fl_Button* o = btnGreen = new Fl_Button(624, 60, 25, 25);
        o->color(FL_GREEN);
        o->callback((Fl_Callback*)cb_btnGreen);
      }
      { Fl_Button* o = btnWhite = new Fl_Button(649, 85, 25, 25);
        o->color(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_btnWhite);
      }
      { Fl_Button* o = btnBlue = new Fl_Button(649, 60, 25, 25);
        o->color(FL_BLUE);
        o->callback((Fl_Callback*)cb_btnBlue);
      }
      { Fl_Button* o = btnYellow = new Fl_Button(598, 85, 25, 25);
        o->color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_btnYellow);
      }
      { Fl_Button* o = btnCyan = new Fl_Button(624, 85, 25, 25);
        o->color((Fl_Color)6);
        o->callback((Fl_Callback*)cb_btnCyan);
      }
      { Fl_Value_Slider* o = sldScale = new Fl_Value_Slider(598, 153, 25, 140, "Fib.");
        o->type(4);
        o->labelsize(10);
        o->maximum(20);
        o->value(1);
        o->callback((Fl_Callback*)cb_sldScale);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Button* o = btnGray1 = new Fl_Button(598, 110, 25, 25);
        o->color(FL_LIGHT2);
        o->callback((Fl_Callback*)cb_btnGray1);
      }
      { Fl_Button* o = btnGray2 = new Fl_Button(624, 110, 25, 25);
        o->color((Fl_Color)48);
        o->callback((Fl_Callback*)cb_btnGray2);
      }
      { Fl_Button* o = btnGray3 = new Fl_Button(649, 110, 25, 25);
        o->color((Fl_Color)43);
        o->callback((Fl_Callback*)cb_btnGray3);
      }
      { Fl_Value_Slider* o = sldConnectionSize = new Fl_Value_Slider(626, 153, 25, 140, "Con.");
        o->type(4);
        o->labelsize(10);
        o->maximum(20);
        o->value(1);
        o->callback((Fl_Callback*)cb_sldConnectionSize);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Check_Button* o = chkEnlargeUsage = new Fl_Check_Button(596, 295, 80, 23, "Enlarge");
        o->down_box(FL_DIAMOND_DOWN_BOX);
        o->value(1);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_chkEnlargeUsage);
      }
      { Fl_Counter* o = cntSectionSides = new Fl_Counter(601, 321, 70, 16, "sides");
        o->type(1);
        o->labelsize(10);
        o->minimum(3);
        o->maximum(20);
        o->step(1);
        o->value(6);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_cntSectionSides);
      }
      { Fl_Counter* o = cntRenderingInterval = new Fl_Counter(601, 352, 70, 17, "interval");
        o->type(1);
        o->labelsize(10);
        o->minimum(1);
        o->maximum(20);
        o->step(1);
        o->value(1);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_cntRenderingInterval);
      }
      { Fl_Counter* o = cntTexScale = new Fl_Counter(601, 382, 70, 17, "Tex. scale");
        o->type(1);
        o->labelsize(10);
        o->minimum(0.01);
        o->maximum(1);
        o->step(0.01);
        o->value(1);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_cntTexScale);
      }
      { Fl_Value_Slider* o = sldBreakageLimit = new Fl_Value_Slider(654, 153, 25, 140, "Br.");
        o->type(4);
        o->labelsize(10);
        o->value(0.75);
        o->callback((Fl_Callback*)cb_sldBreakageLimit);
        o->align(FL_ALIGN_TOP);
      }
      o->end();
    }
    o->end();
  }
}

void CMainFrame::show() {
  wndMain->show();
ivfCustomWidget->show();
sldProgress->hide();
outMessage->hide();
ivfCustomWidget->setWidgets(outMessage, sldProgress, wndMain);
Fl::add_timeout(g_event_spacing, timer_callback,(void*)ivfCustomWidget);
g_mainFrame = this;
m_splash = NULL;
}

Fl_Window* CMainFrame::getWindow() {
  return wndMain;
}

void CMainFrame::center() {
  wndMain->position(Fl::w()/2-wndMain->w()/2,Fl::h()/2-wndMain->h()/2);
}

void CMainFrame::redraw() {
  wndMain->redraw();
}

CMainFrame::~CMainFrame() {
  delete wndMain;
}
