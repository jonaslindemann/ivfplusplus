// generated by Fast Light User Interface Designer (fluid) version 1.0400

#ifndef MainFrame_h
#define MainFrame_h
#include <FL/Fl.H>
#include "SplashFrame.h"
void timer_callback(void * v);
void idle_callback(void* p);
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include "CustomWidget.h"
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Value_Slider.H>
#include "Fl_HoverButton.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Counter.H>

class CMainFrame {
  int m_x; 
  int m_y; 
  int m_w; 
  int m_h; 
  CSplashFrame* m_splash; 
public:
  CMainFrame();
  Fl_Double_Window *wndMain;
private:
  inline void cb_wndMain_i(Fl_Double_Window*, void*);
  static void cb_wndMain(Fl_Double_Window*, void*);
public:
  Fl_Menu_Bar *mnuMain;
  static Fl_Menu_Item menu_mnuMain[];
  static Fl_Menu_Item *mnuFile;
  static Fl_Menu_Item *mnuNew;
private:
  inline void cb_mnuNew_i(Fl_Menu_*, void*);
  static void cb_mnuNew(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuFileOpen;
private:
  inline void cb_mnuFileOpen_i(Fl_Menu_*, void*);
  static void cb_mnuFileOpen(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuFileOpenCSV;
private:
  inline void cb_mnuFileOpenCSV_i(Fl_Menu_*, void*);
  static void cb_mnuFileOpenCSV(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuFileOpenNEF;
private:
  inline void cb_mnuFileOpenNEF_i(Fl_Menu_*, void*);
  static void cb_mnuFileOpenNEF(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuFileExit;
private:
  inline void cb_mnuFileExit_i(Fl_Menu_*, void*);
  static void cb_mnuFileExit(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptions;
  static Fl_Menu_Item *mnuColorMap;
  static Fl_Menu_Item *mnuCmHSV;
private:
  inline void cb_mnuCmHSV_i(Fl_Menu_*, void*);
  static void cb_mnuCmHSV(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmHot;
private:
  inline void cb_mnuCmHot_i(Fl_Menu_*, void*);
  static void cb_mnuCmHot(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmGray;
private:
  inline void cb_mnuCmGray_i(Fl_Menu_*, void*);
  static void cb_mnuCmGray(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmBone;
private:
  inline void cb_mnuCmBone_i(Fl_Menu_*, void*);
  static void cb_mnuCmBone(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmCopper;
private:
  inline void cb_mnuCmCopper_i(Fl_Menu_*, void*);
  static void cb_mnuCmCopper(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmPink;
private:
  inline void cb_mnuCmPink_i(Fl_Menu_*, void*);
  static void cb_mnuCmPink(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmWhite;
private:
  inline void cb_mnuCmWhite_i(Fl_Menu_*, void*);
  static void cb_mnuCmWhite(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmFlag;
private:
  inline void cb_mnuCmFlag_i(Fl_Menu_*, void*);
  static void cb_mnuCmFlag(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmLines;
private:
  inline void cb_mnuCmLines_i(Fl_Menu_*, void*);
  static void cb_mnuCmLines(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmColorCube;
private:
  inline void cb_mnuCmColorCube_i(Fl_Menu_*, void*);
  static void cb_mnuCmColorCube(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmJet;
private:
  inline void cb_mnuCmJet_i(Fl_Menu_*, void*);
  static void cb_mnuCmJet(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmPrism;
private:
  inline void cb_mnuCmPrism_i(Fl_Menu_*, void*);
  static void cb_mnuCmPrism(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmCool;
private:
  inline void cb_mnuCmCool_i(Fl_Menu_*, void*);
  static void cb_mnuCmCool(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmAutumn;
private:
  inline void cb_mnuCmAutumn_i(Fl_Menu_*, void*);
  static void cb_mnuCmAutumn(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmSpring;
private:
  inline void cb_mnuCmSpring_i(Fl_Menu_*, void*);
  static void cb_mnuCmSpring(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmWinter;
private:
  inline void cb_mnuCmWinter_i(Fl_Menu_*, void*);
  static void cb_mnuCmWinter(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuCmSummer;
private:
  inline void cb_mnuCmSummer_i(Fl_Menu_*, void*);
  static void cb_mnuCmSummer(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTexture;
  static Fl_Menu_Item *mnuTx1;
private:
  inline void cb_mnuTx1_i(Fl_Menu_*, void*);
  static void cb_mnuTx1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx2;
private:
  inline void cb_mnuTx2_i(Fl_Menu_*, void*);
  static void cb_mnuTx2(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx3;
private:
  inline void cb_mnuTx3_i(Fl_Menu_*, void*);
  static void cb_mnuTx3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx4;
private:
  inline void cb_mnuTx4_i(Fl_Menu_*, void*);
  static void cb_mnuTx4(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx5;
private:
  inline void cb_mnuTx5_i(Fl_Menu_*, void*);
  static void cb_mnuTx5(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx6;
private:
  inline void cb_mnuTx6_i(Fl_Menu_*, void*);
  static void cb_mnuTx6(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx7;
private:
  inline void cb_mnuTx7_i(Fl_Menu_*, void*);
  static void cb_mnuTx7(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx8;
private:
  inline void cb_mnuTx8_i(Fl_Menu_*, void*);
  static void cb_mnuTx8(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx9;
private:
  inline void cb_mnuTx9_i(Fl_Menu_*, void*);
  static void cb_mnuTx9(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx10;
private:
  inline void cb_mnuTx10_i(Fl_Menu_*, void*);
  static void cb_mnuTx10(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx11;
private:
  inline void cb_mnuTx11_i(Fl_Menu_*, void*);
  static void cb_mnuTx11(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuTx12;
private:
  inline void cb_mnuTx12_i(Fl_Menu_*, void*);
  static void cb_mnuTx12(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuExtTx1;
private:
  inline void cb_mnuExtTx1_i(Fl_Menu_*, void*);
  static void cb_mnuExtTx1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsFibreNetwork;
  static Fl_Menu_Item *mnuOptionFibreNetworkBlendFibres;
private:
  inline void cb_mnuOptionFibreNetworkBlendFibres_i(Fl_Menu_*, void*);
  static void cb_mnuOptionFibreNetworkBlendFibres(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionFibreNetworkFibreLighting;
private:
  inline void cb_mnuOptionFibreNetworkFibreLighting_i(Fl_Menu_*, void*);
  static void cb_mnuOptionFibreNetworkFibreLighting(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsStereo;
  static Fl_Menu_Item *mnuOptionsStereoNone;
private:
  inline void cb_mnuOptionsStereoNone_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsStereoNone(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsStereoAnaglyph;
private:
  inline void cb_mnuOptionsStereoAnaglyph_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsStereoAnaglyph(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsStereoQuadBuffer;
private:
  inline void cb_mnuOptionsStereoQuadBuffer_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsStereoQuadBuffer(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsViewMode;
  static Fl_Menu_Item *mnuOptionsViewModeExaminer;
private:
  inline void cb_mnuOptionsViewModeExaminer_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsViewModeExaminer(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsViewModeFly;
private:
  inline void cb_mnuOptionsViewModeFly_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsViewModeFly(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsPerf;
  static Fl_Menu_Item *mnuOptionsPerfDL;
private:
  inline void cb_mnuOptionsPerfDL_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsPerfDL(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsPerfVFollowPath;
private:
  inline void cb_mnuOptionsPerfVFollowPath_i(Fl_Menu_*, void*);
  static void cb_mnuOptionsPerfVFollowPath(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuOptionsExtrTextureMode;
private:
  inline void cb_No_i(Fl_Menu_*, void*);
  static void cb_No(Fl_Menu_*, void*);
  inline void cb_VERTEX_FLAT_i(Fl_Menu_*, void*);
  static void cb_VERTEX_FLAT(Fl_Menu_*, void*);
  inline void cb_NORMAL_FLAT_i(Fl_Menu_*, void*);
  static void cb_NORMAL_FLAT(Fl_Menu_*, void*);
  inline void cb_VERTEX_CYL_i(Fl_Menu_*, void*);
  static void cb_VERTEX_CYL(Fl_Menu_*, void*);
  inline void cb_NORMAL_CYL_i(Fl_Menu_*, void*);
  static void cb_NORMAL_CYL(Fl_Menu_*, void*);
  inline void cb_VERTEX_SPH_i(Fl_Menu_*, void*);
  static void cb_VERTEX_SPH(Fl_Menu_*, void*);
  inline void cb_NORMAL_SPH_i(Fl_Menu_*, void*);
  static void cb_NORMAL_SPH(Fl_Menu_*, void*);
  inline void cb_VERTEX_MODEL_FLAT_i(Fl_Menu_*, void*);
  static void cb_VERTEX_MODEL_FLAT(Fl_Menu_*, void*);
  inline void cb_NORMAL_MODEL_FLAT_i(Fl_Menu_*, void*);
  static void cb_NORMAL_MODEL_FLAT(Fl_Menu_*, void*);
  inline void cb_VERTEX_MODEL_CYL_i(Fl_Menu_*, void*);
  static void cb_VERTEX_MODEL_CYL(Fl_Menu_*, void*);
  inline void cb_NORMAL_MODEL_CYL_i(Fl_Menu_*, void*);
  static void cb_NORMAL_MODEL_CYL(Fl_Menu_*, void*);
  inline void cb_VERTEX_MODEL_SPH_i(Fl_Menu_*, void*);
  static void cb_VERTEX_MODEL_SPH(Fl_Menu_*, void*);
  inline void cb_NORMAL_MODEL_SPH_i(Fl_Menu_*, void*);
  static void cb_NORMAL_MODEL_SPH(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *mnuHelp;
  static Fl_Menu_Item *mnuHelpAbout;
private:
  inline void cb_mnuHelpAbout_i(Fl_Menu_*, void*);
  static void cb_mnuHelpAbout(Fl_Menu_*, void*);
public:
  CCustomWidget *ivfCustomWidget;
  Fl_Scroll *scrTop;
  Fl_Value_Slider *sldTimeStep;
private:
  inline void cb_sldTimeStep_i(Fl_Value_Slider*, void*);
  static void cb_sldTimeStep(Fl_Value_Slider*, void*);
public:
  Fl_HoverButton *btnPlay;
private:
  inline void cb_btnPlay_i(Fl_HoverButton*, void*);
  static void cb_btnPlay(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnStop;
private:
  inline void cb_btnStop_i(Fl_HoverButton*, void*);
  static void cb_btnStop(Fl_HoverButton*, void*);
public:
  Fl_Value_Slider *sldSpeed;
private:
  inline void cb_sldSpeed_i(Fl_Value_Slider*, void*);
  static void cb_sldSpeed(Fl_Value_Slider*, void*);
public:
  Fl_HoverButton *btnRewind;
private:
  inline void cb_btnRewind_i(Fl_HoverButton*, void*);
  static void cb_btnRewind(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnLast;
private:
  inline void cb_btnLast_i(Fl_HoverButton*, void*);
  static void cb_btnLast(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *chkLoop;
private:
  inline void cb_chkLoop_i(Fl_HoverButton*, void*);
  static void cb_chkLoop(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *chkForwardBack;
private:
  inline void cb_chkForwardBack_i(Fl_HoverButton*, void*);
  static void cb_chkForwardBack(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnShowConnections;
private:
  inline void cb_btnShowConnections_i(Fl_HoverButton*, void*);
  static void cb_btnShowConnections(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnShowUsage;
private:
  inline void cb_btnShowUsage_i(Fl_HoverButton*, void*);
  static void cb_btnShowUsage(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnShowDiagram;
private:
  inline void cb_btnShowDiagram_i(Fl_HoverButton*, void*);
  static void cb_btnShowDiagram(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnOpen;
private:
  inline void cb_btnOpen_i(Fl_HoverButton*, void*);
  static void cb_btnOpen(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnFullScreen;
private:
  inline void cb_btnFullScreen_i(Fl_HoverButton*, void*);
  static void cb_btnFullScreen(Fl_HoverButton*, void*);
public:
  Fl_Scroll *scrLeft;
  Fl_Value_Slider *sldFogNear;
private:
  inline void cb_sldFogNear_i(Fl_Value_Slider*, void*);
  static void cb_sldFogNear(Fl_Value_Slider*, void*);
public:
  Fl_Box *lblFog;
  Fl_Value_Slider *sldFogFar;
private:
  inline void cb_sldFogFar_i(Fl_Value_Slider*, void*);
  static void cb_sldFogFar(Fl_Value_Slider*, void*);
public:
  Fl_HoverButton *btnViewZoom;
private:
  inline void cb_btnViewZoom_i(Fl_HoverButton*, void*);
  static void cb_btnViewZoom(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnViewPan;
private:
  inline void cb_btnViewPan_i(Fl_HoverButton*, void*);
  static void cb_btnViewPan(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnStoreCamera;
private:
  inline void cb_btnStoreCamera_i(Fl_HoverButton*, void*);
  static void cb_btnStoreCamera(Fl_HoverButton*, void*);
public:
  Fl_HoverButton *btnLoadCamera;
private:
  inline void cb_btnLoadCamera_i(Fl_HoverButton*, void*);
  static void cb_btnLoadCamera(Fl_HoverButton*, void*);
public:
  Fl_Scroll *scrBottom;
  Fl_Value_Input *inpScaleFactor;
  Fl_Button *btnApplyScale;
private:
  inline void cb_btnApplyScale_i(Fl_Button*, void*);
  static void cb_btnApplyScale(Fl_Button*, void*);
public:
  Fl_Slider *sldProgress;
  Fl_Output *outMessage;
  Fl_Scroll *scrRight;
  Fl_Button *btnRed;
private:
  inline void cb_btnRed_i(Fl_Button*, void*);
  static void cb_btnRed(Fl_Button*, void*);
public:
  Fl_Button *btnGreen;
private:
  inline void cb_btnGreen_i(Fl_Button*, void*);
  static void cb_btnGreen(Fl_Button*, void*);
public:
  Fl_Button *btnWhite;
private:
  inline void cb_btnWhite_i(Fl_Button*, void*);
  static void cb_btnWhite(Fl_Button*, void*);
public:
  Fl_Button *btnBlue;
private:
  inline void cb_btnBlue_i(Fl_Button*, void*);
  static void cb_btnBlue(Fl_Button*, void*);
public:
  Fl_Button *btnYellow;
private:
  inline void cb_btnYellow_i(Fl_Button*, void*);
  static void cb_btnYellow(Fl_Button*, void*);
public:
  Fl_Button *btnCyan;
private:
  inline void cb_btnCyan_i(Fl_Button*, void*);
  static void cb_btnCyan(Fl_Button*, void*);
public:
  Fl_Value_Slider *sldScale;
private:
  inline void cb_sldScale_i(Fl_Value_Slider*, void*);
  static void cb_sldScale(Fl_Value_Slider*, void*);
public:
  Fl_Button *btnGray1;
private:
  inline void cb_btnGray1_i(Fl_Button*, void*);
  static void cb_btnGray1(Fl_Button*, void*);
public:
  Fl_Button *btnGray2;
private:
  inline void cb_btnGray2_i(Fl_Button*, void*);
  static void cb_btnGray2(Fl_Button*, void*);
public:
  Fl_Button *btnGray3;
private:
  inline void cb_btnGray3_i(Fl_Button*, void*);
  static void cb_btnGray3(Fl_Button*, void*);
public:
  Fl_Value_Slider *sldConnectionSize;
private:
  inline void cb_sldConnectionSize_i(Fl_Value_Slider*, void*);
  static void cb_sldConnectionSize(Fl_Value_Slider*, void*);
public:
  Fl_Check_Button *chkEnlargeUsage;
private:
  inline void cb_chkEnlargeUsage_i(Fl_Check_Button*, void*);
  static void cb_chkEnlargeUsage(Fl_Check_Button*, void*);
public:
  Fl_Counter *cntSectionSides;
private:
  inline void cb_cntSectionSides_i(Fl_Counter*, void*);
  static void cb_cntSectionSides(Fl_Counter*, void*);
public:
  Fl_Counter *cntRenderingInterval;
private:
  inline void cb_cntRenderingInterval_i(Fl_Counter*, void*);
  static void cb_cntRenderingInterval(Fl_Counter*, void*);
public:
  Fl_Counter *cntTexScale;
private:
  inline void cb_cntTexScale_i(Fl_Counter*, void*);
  static void cb_cntTexScale(Fl_Counter*, void*);
public:
  Fl_Value_Slider *sldBreakageLimit;
private:
  inline void cb_sldBreakageLimit_i(Fl_Value_Slider*, void*);
  static void cb_sldBreakageLimit(Fl_Value_Slider*, void*);
public:
  void show();
  Fl_Window* getWindow();
  void center();
  void redraw();
  ~CMainFrame();
};
#endif
