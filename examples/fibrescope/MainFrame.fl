# data file for the Fltk User Interface Designer (fluid)
version 1.0400
header_name {.h}
code_name {.cpp}
decl {\#include "SplashFrame.h"} {public local
}

decl {MainFrame* g_mainFrame} {private local
}

decl {float g_event_spacing = 1.0} {private local
}

decl {bool g_playing = false;} {private local
}

Function {timer_callback(void * v)} {open
} {
  code {if (g_playing)
{
	CustomWidget* widget = (CustomWidget*)v;
	widget->nextStep();
	g_mainFrame->sldTimeStep->value(widget->getTimeStep());
}
Fl::add_timeout(g_event_spacing, timer_callback, v);} {}
}

Function {idle_callback(void* p)} {open
} {
  code {CustomWidget* widget = (CustomWidget*)p;
widget->nextStep();} {}
}

class MainFrame {open
} {
  decl {int m_x} {private local
  }
  decl {int m_y} {private local
  }
  decl {int m_w} {private local
  }
  decl {int m_h} {private local
  }
  decl {SplashFrame* m_splash} {private local
  }
  Function {MainFrame()} {open selected
  } {
    Fl_Window wndMain {
      label {FibreScope - version 1.2}
      callback {wndMain->hide();} open
      xywh {1653 282 684 557} type Double when 1 resizable visible
    } {
      Fl_Menu_Bar mnuMain {open
        xywh {0 0 656 26} box NO_BOX labelsize 12 textsize 12
      } {
        Submenu mnuFile {
          label {&File} open
          xywh {10 10 100 20} labelsize 12
        } {
          MenuItem mnuNew {
            label {&New}
            callback {customWidget->clearAll();}
            xywh {0 0 100 20} labelsize 12
          }
          MenuItem mnuFileOpen {
            label {&Open FIB...}
            callback {customWidget->open();
inpScaleFactor->value(customWidget->getScaling());
sldTimeStep->maximum(customWidget->getSteps()-1);
sldFogNear->value(customWidget->getFogNear());
sldFogFar->value(customWidget->getFogFar());
sldScale->value(customWidget->getScaleFactor());
sldConnectionSize->value(customWidget->getConnectionSize());
if (customWidget->getEnlargeUsage())
	chkEnlargeUsage->value(1);
else
	chkEnlargeUsage->value(0);}
            xywh {0 0 100 20} labelsize 12
          }
          MenuItem mnuFileOpenCSV {
            label {Open &CSV...}
            callback {customWidget->openCSV();
inpScaleFactor->value(customWidget->getScaling());
sldTimeStep->maximum(customWidget->getSteps()-1);
sldFogNear->value(customWidget->getFogNear());
sldFogFar->value(customWidget->getFogFar());
sldScale->value(customWidget->getScaleFactor());
sldConnectionSize->value(customWidget->getConnectionSize());
if (customWidget->getEnlargeUsage())
	chkEnlargeUsage->value(1);
else
	chkEnlargeUsage->value(0);}
            xywh {10 10 100 20} shortcut 0x4006f labelsize 12
          }
          MenuItem mnuFileOpenNEF {
            label {Open NEF...}
            callback {customWidget->openNEF();
inpScaleFactor->value(customWidget->getScaling());
sldTimeStep->maximum(customWidget->getSteps()-1);
sldFogNear->value(customWidget->getFogNear());
sldFogFar->value(customWidget->getFogFar());
sldScale->value(customWidget->getScaleFactor());
sldConnectionSize->value(customWidget->getConnectionSize());
if (customWidget->getEnlargeUsage())
	chkEnlargeUsage->value(1);
else
	chkEnlargeUsage->value(0);}
            xywh {0 0 100 20} labelsize 12 divider
          }
          MenuItem mnuFileExit {
            label {&Exit}
            callback {wndMain->hide();}
            xywh {0 0 100 20} shortcut 0x8ffc1 value 1 labelsize 12
          }
        }
        Submenu mnuOptions {
          label Options open
          xywh {0 0 100 20} labelsize 12
        } {
          Submenu mnuColorMap {
            label {&Colormap}
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem mnuCmHSV {
              label HSV
              callback {customWidget->setColorMap(0);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmHot {
              label Hot
              callback {customWidget->setColorMap(1);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmGray {
              label Gray
              callback {customWidget->setColorMap(2);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmBone {
              label Bone
              callback {customWidget->setColorMap(3);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmCopper {
              label Copper
              callback {customWidget->setColorMap(4);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmPink {
              label Pink
              callback {customWidget->setColorMap(5);}
              xywh {12 12 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmWhite {
              label White
              callback {customWidget->setColorMap(6);}
              xywh {20 20 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmFlag {
              label Flag
              callback {customWidget->setColorMap(7);}
              xywh {32 32 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmLines {
              label Lines
              callback {customWidget->setColorMap(8);}
              xywh {40 40 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmColorCube {
              label ColorCube
              callback {customWidget->setColorMap(9);}
              xywh {52 52 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmJet {
              label Jet
              callback {customWidget->setColorMap(10);}
              xywh {60 60 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmPrism {
              label Prism
              callback {customWidget->setColorMap(11);}
              xywh {12 12 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmCool {
              label Cool
              callback {customWidget->setColorMap(12);}
              xywh {20 20 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmAutumn {
              label Autumn
              callback {customWidget->setColorMap(13);}
              xywh {32 32 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmSpring {
              label Spring
              callback {customWidget->setColorMap(14);}
              xywh {40 40 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmWinter {
              label Winter
              callback {customWidget->setColorMap(15);}
              xywh {52 52 100 20} type Radio labelsize 12
            }
            MenuItem mnuCmSummer {
              label Summer
              callback {customWidget->setColorMap(16);}
              xywh {60 60 100 20} type Radio labelsize 12
            }
          }
          Submenu mnuTexture {
            label {&Fibre texture}
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem mnuTx1 {
              label {&Texture 1}
              callback {customWidget->setTexture(0);}
              xywh {0 0 100 20} labelsize 12
            }
            MenuItem mnuTx2 {
              label {&Texture 2}
              callback {customWidget->setTexture(1);}
              xywh {12 12 100 20} labelsize 12
            }
            MenuItem mnuTx3 {
              label {&Texture 3}
              callback {customWidget->setTexture(2);}
              xywh {20 20 100 20} labelsize 12
            }
            MenuItem mnuTx4 {
              label {&Texture 4}
              callback {customWidget->setTexture(3);}
              xywh {32 32 100 20} labelsize 12
            }
            MenuItem mnuTx5 {
              label {&Texture 5}
              callback {customWidget->setTexture(4);}
              xywh {40 40 100 20} labelsize 12
            }
            MenuItem mnuTx6 {
              label {&Texture 6}
              callback {customWidget->setTexture(5);}
              xywh {52 52 100 20} labelsize 12
            }
            MenuItem mnuTx7 {
              label {&Texture 7}
              callback {customWidget->setTexture(6);}
              xywh {60 60 100 20} labelsize 12
            }
            MenuItem mnuTx8 {
              label {&Texture 8}
              callback {customWidget->setTexture(7);}
              xywh {72 72 100 20} labelsize 12
            }
            MenuItem mnuTx9 {
              label {&Texture 9}
              callback {customWidget->setTexture(8);}
              xywh {84 84 100 20} labelsize 12
            }
            MenuItem mnuTx10 {
              label {&Texture 10}
              callback {customWidget->setTexture(9);}
              xywh {92 92 100 20} labelsize 12
            }
            MenuItem mnuTx11 {
              label {&Texture 11}
              callback {customWidget->setTexture(10);}
              xywh {104 104 100 20} labelsize 12
            }
            MenuItem mnuTx12 {
              label {&Texture 12}
              callback {customWidget->setTexture(11);}
              xywh {112 112 100 20} labelsize 12 divider
            }
            MenuItem mnuExtTx1 {
              label {Extr. Texture 1}
              callback {customWidget->setTexture(12);}
              xywh {0 0 100 20}
            }
          }
          Submenu mnuOptionsFibreNetwork {
            label {Fibre network} open
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem mnuOptionFibreNetworkBlendFibres {
              label {Blend fibres (Additive)}
              callback {if (mnuOptionFibreNetworkBlendFibres->value()>0)
	customWidget->setBlendFibres(true);
else
	customWidget->setBlendFibres(false);}
              xywh {0 0 100 20} type Toggle labelsize 12
            }
            MenuItem mnuOptionFibreNetworkFibreLighting {
              label {Fibre lighting}
              callback {if (mnuOptionFibreNetworkFibreLighting->value()>0)
	customWidget->setFibreLighting(true);
else
	customWidget->setFibreLighting(false);}
              xywh {0 0 100 20} type Toggle value 1 labelsize 12
            }
          }
          Submenu mnuOptionsStereo {
            label {Stereo options} open
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem mnuOptionsStereoNone {
              label None
              callback {customWidget->setStereoMode(CustomWidget::SM_NONE);}
              xywh {0 0 100 20} type Radio value 1 labelsize 12
            }
            MenuItem mnuOptionsStereoAnaglyph {
              label Anaglyph
              callback {customWidget->setStereoMode(CustomWidget::SM_ANAGLYPH);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem mnuOptionsStereoQuadBuffer {
              label {Quad buffered}
              callback {customWidget->setStereoMode(CustomWidget::SM_QUAD_BUFFER);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
          }
          Submenu mnuOptionsViewMode {
            label Viewing open
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem mnuOptionsViewModeExaminer {
              label Examiner
              callback {customWidget->setViewMode(CustomWidget::VM_EXAMINER);}
              xywh {0 0 100 20}
            }
            MenuItem mnuOptionsViewModeFly {
              label Fly
              callback {customWidget->setViewMode(CustomWidget::VM_FLY);}
              xywh {0 0 100 20}
            }
          }
          Submenu mnuOptionsPerf {
            label Performance open
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem mnuOptionsPerfDL {
              label {Use Display Lists}
              callback {if (mnuOptionsPerfDL->value()>0)
	customWidget->setUseDisplayLists(true);
else
	customWidget->setUseDisplayLists(false);}
              xywh {0 0 100 20} type Toggle labelsize 12
            }
            MenuItem mnuOptionsPerfVFollowPath {
              label {Vertex normal follow path}
              callback {if (mnuOptionsPerfVFollowPath->value()!=0)
	customWidget->setVertexNormalFollowPath(true);
else
	customWidget->setVertexNormalFollowPath(false);}
              xywh {0 0 100 20} type Toggle labelsize 12
            }
          }
          Submenu mnuOptionsExtrTextureMode {
            label {Extrusion texture mode} open
            xywh {0 0 100 20} labelsize 12
          } {
            MenuItem {} {
              label {No texture}
              callback {customWidget->setExtrusionTextureMode(0);}
              xywh {0 0 100 20} type Radio value 1 labelsize 12 divider
            }
            MenuItem {} {
              label VERTEX_FLAT
              callback {customWidget->setExtrusionTextureMode(1);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label NORMAL_FLAT
              callback {customWidget->setExtrusionTextureMode(2);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label VERTEX_CYL
              callback {customWidget->setExtrusionTextureMode(3);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label NORMAL_CYL
              callback {customWidget->setExtrusionTextureMode(4);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label VERTEX_SPH
              callback {customWidget->setExtrusionTextureMode(5);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label NORMAL_SPH
              callback {customWidget->setExtrusionTextureMode(6);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label VERTEX_MODEL_FLAT
              callback {customWidget->setExtrusionTextureMode(7);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label NORMAL_MODEL_FLAT
              callback {customWidget->setExtrusionTextureMode(8);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label VERTEX_MODEL_CYL
              callback {customWidget->setExtrusionTextureMode(9);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label NORMAL_MODEL_CYL
              callback {customWidget->setExtrusionTextureMode(10);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label VERTEX_MODEL_SPH
              callback {customWidget->setExtrusionTextureMode(11);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
            MenuItem {} {
              label NORMAL_MODEL_SPH
              callback {customWidget->setExtrusionTextureMode(12);}
              xywh {0 0 100 20} type Radio labelsize 12
            }
          }
        }
        Submenu mnuHelp {
          label {&Help} open
          xywh {0 0 100 20} labelsize 12
        } {
          MenuItem mnuHelpAbout {
            label {&About FibreScope...}
            callback {if (m_splash!=NULL)
{
	m_splash->hide();
	delete m_splash;
}
m_splash = new SplashFrame();
m_splash->setTimer(false);
m_splash->center();
m_splash->show();}
            xywh {0 0 100 20} labelsize 12
          }
        }
      }
      Fl_Box customWidget {
        xywh {33 58 559 469} box DOWN_BOX when 1 resizable
        code0 {\#include "CustomWidget.h"}
        class CustomWidget
      }
      Fl_Scroll scrTop {
        xywh {0 25 683 32} box ENGRAVED_BOX
      } {
        Fl_Value_Slider sldTimeStep {
          label Step
          callback {customWidget->setTimeStep((double)sldTimeStep->value());}
          xywh {224 30 135 22} type {Horz Knob} labelsize 10 align 4 maximum 100 step 1
        }
        Fl_Button btnPlay {
          callback {if (btnPlay->value()==1)
	g_playing = true;
else
	g_playing = false;}
          image {./images/tlRun.xpm} xywh {61 29 25 25} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnStop {
          callback {g_playing = false;
btnPlay->value(0);}
          image {./images/tlPause.xpm} xywh {86 29 25 25} box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Value_Slider sldSpeed {
          label Delay
          callback {g_event_spacing = sldSpeed->value();}
          xywh {404 30 125 22} type {Horz Knob} labelsize 10 align 4 minimum 0.01 value 1
        }
        Fl_Button btnRewind {
          callback {customWidget->rewind();}
          image {./images/tlFirst.xpm} xywh {36 29 25 25} box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnLast {
          callback {customWidget->last();}
          image {./images/tlLast.xpm} xywh {111 29 25 25} box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button chkLoop {
          callback {if (chkLoop->value()==1)
	customWidget->setLoop(true);
else
	customWidget->setLoop(false);}
          image {./images/tlLoop.xpm} xywh {143 29 25 25} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button chkForwardBack {
          callback {if (chkForwardBack->value()==1)
	customWidget->setReverse(true);
else
	customWidget->setReverse(false);}
          image {./images/tlForwardBack.xpm} xywh {168 29 25 25} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnShowConnections {
          callback {if (btnShowConnections->value()==1)
	customWidget->setShowConnections(true);
else
	customWidget->setShowConnections(false);}
          image {./images/tlConnections.xpm} xywh {535 30 23 22} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX value 1 labelsize 10
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnShowUsage {
          callback {if (btnShowUsage->value()==1)
	customWidget->setShowUsage(true);
else
	customWidget->setShowUsage(false);}
          image {./images/tlUsage.xpm} xywh {558 30 22 22} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 10
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnShowDiagram {
          callback {if (btnShowDiagram->value()==1)
	customWidget->setShowStressDiagram(true);
else
	customWidget->setShowStressDiagram(false);}
          image {./images/tlDiagram.xpm} xywh {580 30 22 22} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 10
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnOpen {
          callback {customWidget->open();
inpScaleFactor->value(customWidget->getScaling());
sldTimeStep->maximum(customWidget->getSteps()-1);
sldFogNear->value(customWidget->getFogNear());
sldFogFar->value(customWidget->getFogFar());
sldScale->value(customWidget->getScaleFactor());}
          image {./images/tlOpen.xpm} xywh {5 29 25 25} box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnFullScreen {
          callback {customWidget->enableFullscreen();}
          image {./images/tlFullscreen.xpm} xywh {603 30 22 22} box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 10
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
      }
      Fl_Scroll scrLeft {
        xywh {0 55 33 474} box ENGRAVED_BOX
      } {
        Fl_Value_Slider sldFogNear {
          label Near
          callback {customWidget->setFogNear((double)sldFogNear->value());}
          xywh {5 92 23 115} type {Vert Knob} labelsize 10 align 1 minimum 5 maximum 2000 step 1 value 150
        }
        Fl_Box lblFog {
          label Fog
          xywh {5 59 25 20} labelsize 10
        }
        Fl_Value_Slider sldFogFar {
          label Far
          callback {customWidget->setFogFar((double)sldFogFar->value());}
          xywh {5 228 23 115} type {Vert Knob} labelsize 10 align 1 minimum 5 maximum 2000 step 1 value 300
        }
        Fl_Button btnViewZoom {
          callback {btnViewPan->value(0);}
          image {./images/tlViewZoom.xpm} xywh {4 350 25 25} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX value 1 labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnViewPan {
          callback {btnViewZoom->value(0);}
          image {./images/tlViewPan.xpm} xywh {4 375 25 25} type Toggle box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 12
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnStoreCamera {
          callback {customWidget->storeCamera();}
          image {images/tlExport.xpm} xywh {4 405 25 24} box THIN_UP_BOX down_box THIN_DOWN_BOX
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
        Fl_Button btnLoadCamera {
          callback {customWidget->loadCamera();}
          image {images/tlImport.xpm} xywh {4 429 25 24} box THIN_UP_BOX down_box THIN_DOWN_BOX
          code0 {\#include "Fl_HoverButton.h"}
          class Fl_HoverButton
        }
      }
      Fl_Scroll scrBottom {
        xywh {0 527 683 30} box ENGRAVED_BOX labelsize 12
      } {
        Fl_Value_Input inpScaleFactor {
          label {Scalefactor:}
          xywh {76 532 88 20} labelsize 10 minimum -1e+300 maximum 1e+300 textsize 10
        }
        Fl_Button btnApplyScale {
          label Apply
          callback {customWidget->setScaling((double)inpScaleFactor->value());}
          xywh {168 532 44 20} box THIN_UP_BOX down_box THIN_DOWN_BOX labelsize 10
        }
        Fl_Slider sldProgress {
          xywh {456 533 156 19} type {Horz Fill} labelsize 10 align 0
        }
        Fl_Output outMessage {
          xywh {224 533 224 19} color 15 labelsize 10 textsize 10
        }
      }
      Fl_Scroll scrRight {open
        xywh {593 55 90 474} box ENGRAVED_BOX
      } {
        Fl_Button btnRed {
          callback {customWidget->setColor(0);}
          xywh {598 60 25 25} color 88
        }
        Fl_Button btnGreen {
          callback {customWidget->setColor(1);}
          xywh {624 60 25 25} color 63
        }
        Fl_Button btnWhite {
          callback {customWidget->setColor(2);}
          xywh {649 85 25 25} color 7
        }
        Fl_Button btnBlue {
          callback {customWidget->setColor(3);}
          xywh {649 60 25 25} color 216
        }
        Fl_Button btnYellow {
          callback {customWidget->setColor(4);}
          xywh {598 85 25 25} color 3
        }
        Fl_Button btnCyan {
          callback {customWidget->setColor(5);}
          xywh {624 85 25 25} color 6
        }
        Fl_Value_Slider sldScale {
          label {Fib.}
          callback {customWidget->setScaleFactor((double)sldScale->value());}
          xywh {598 153 25 140} type {Vert Knob} labelsize 10 align 1 maximum 20 value 1
        }
        Fl_Button btnGray1 {
          callback {customWidget->setColor(6);}
          xywh {598 110 25 25} color 52
        }
        Fl_Button btnGray2 {
          callback {customWidget->setColor(7);}
          xywh {624 110 25 25} color 48
        }
        Fl_Button btnGray3 {
          callback {customWidget->setColor(8);}
          xywh {649 110 25 25} color 43
        }
        Fl_Value_Slider sldConnectionSize {
          label {Con.}
          callback {customWidget->setConnectionSize((double)sldConnectionSize->value());}
          xywh {626 153 25 140} type {Vert Knob} labelsize 10 align 1 maximum 20 value 1
        }
        Fl_Check_Button chkEnlargeUsage {
          label Enlarge
          callback {if (chkEnlargeUsage->value()==1)
	customWidget->setEnlargeUsage(true);
else
	customWidget->setEnlargeUsage(false);}
          xywh {596 295 80 23} down_box DIAMOND_DOWN_BOX value 1 labelsize 11
        }
        Fl_Counter cntSectionSides {
          label sides
          callback {customWidget->setSectionSides(cntSectionSides->value());}
          xywh {601 321 70 16} type Simple labelsize 10 minimum 3 maximum 20 step 1 value 6 textsize 10
        }
        Fl_Counter cntRenderingInterval {
          label interval
          callback {customWidget->setRenderingInterval(cntRenderingInterval->value());}
          xywh {601 352 70 17} type Simple labelsize 10 minimum 1 maximum 20 step 1 value 1 textsize 10
        }
        Fl_Counter cntTexScale {
          label {Tex. scale}
          callback {customWidget->setTextureScale(cntTexScale->value());}
          xywh {601 382 70 17} type Simple labelsize 10 minimum 0.01 maximum 1 step 0.01 value 1 textsize 10
        }
        Fl_Value_Slider sldBreakageLimit {
          label {Br.}
          callback {customWidget->setBreakageLimit((double)sldBreakageLimit->value());}
          xywh {654 153 25 140} type {Vert Knob} labelsize 10 align 1 value 0.75
        }
      }
    }
  }
  Function {show()} {open
  } {
    code {wndMain->show();
customWidget->show();
sldProgress->hide();
outMessage->hide();
customWidget->setWidgets(outMessage, sldProgress, wndMain);
Fl::add_timeout(g_event_spacing, timer_callback,(void*)customWidget);
g_mainFrame = this;
m_splash = NULL;} {}
  }
  Function {getWindow()} {open return_type {Fl_Window*}
  } {
    code {return wndMain;} {}
  }
  Function {center()} {open
  } {
    code {wndMain->position(Fl::w()/2-wndMain->w()/2,Fl::h()/2-wndMain->h()/2);} {}
  }
  Function {redraw()} {} {
    code {wndMain->redraw();} {}
  }
  Function {~MainFrame()} {} {
    code {delete wndMain;} {}
  }
}
