// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "MainFrame.h"

void MainFrame::cb_btnSelectAll_i(Fl_Button*, void*) {
  workspaceView->selectAll();
}
void MainFrame::cb_btnSelectAll(Fl_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnSelectAll_i(o,v);
}

void MainFrame::cb_btnSelect_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(WorkspaceView::VM_SELECT_SHAPES);
outInfo->value("Select nodes and beams using the mouse.");
}
void MainFrame::cb_btnSelect(Fl_Light_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnSelect_i(o,v);
}

void MainFrame::cb_btnMove_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(WorkspaceView::VM_MOVE_SHAPES);
outInfo->value("Use the mouse to select start point for move.");
}
void MainFrame::cb_btnMove(Fl_Light_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnMove_i(o,v);
}

void MainFrame::cb_btnCopy_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(WorkspaceView::VM_COPY_SHAPES);
outInfo->value("Use the mouse to select starting point for copy operation.");
}
void MainFrame::cb_btnCopy(Fl_Light_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnCopy_i(o,v);
}

void MainFrame::cb_btnDelete_i(Fl_Button*, void*) {
  workspaceView->deleteSelectedNodes();
}
void MainFrame::cb_btnDelete(Fl_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnDelete_i(o,v);
}

void MainFrame::cb_btnCreateNodes_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(WorkspaceView::VM_CREATE_SHAPES);
outInfo->value("Use the mouse to create nodes.");
}
void MainFrame::cb_btnCreateNodes(Fl_Light_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnCreateNodes_i(o,v);
}

void MainFrame::cb_btnCreateLines_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(WorkspaceView::VM_CREATE_LINES);
outInfo->value("Create beams by selecting two nodes.");
}
void MainFrame::cb_btnCreateLines(Fl_Light_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnCreateLines_i(o,v);
}

void MainFrame::cb_btnCreateVectors_i(Fl_Light_Button*, void*) {
  workspaceView->setViewMode(WorkspaceView::VM_CREATE_VECTORS);
outInfo->value("Select a node to create a load.");
}
void MainFrame::cb_btnCreateVectors(Fl_Light_Button* o, void* v) {
  ((MainFrame*)(o->parent()->parent()->user_data()))->cb_btnCreateVectors_i(o,v);
}

MainFrame::MainFrame() {
  { wndMain = new Fl_Double_Window(849, 653, "ObjectiveFrame HCI prototype");
    wndMain->user_data((void*)(this));
    { workspaceView = new WorkspaceView(87, 0, 762, 609, "label");
      workspaceView->box(FL_FLAT_BOX);
      workspaceView->color((Fl_Color)27);
      workspaceView->selection_color(FL_BACKGROUND_COLOR);
      workspaceView->labeltype(FL_NORMAL_LABEL);
      workspaceView->labelfont(0);
      workspaceView->labelsize(14);
      workspaceView->labelcolor(FL_FOREGROUND_COLOR);
      workspaceView->align(Fl_Align(FL_ALIGN_CENTER));
      workspaceView->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(workspaceView);
    } // WorkspaceView* workspaceView
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 87, 653);
      { btnSelectAll = new Fl_Button(5, 35, 74, 35, "Select all nodes");
        btnSelectAll->tooltip("Select all nodes");
        btnSelectAll->shortcut(0x40061);
        btnSelectAll->down_box(FL_DOWN_BOX);
        btnSelectAll->labelfont(1);
        btnSelectAll->labelsize(12);
        btnSelectAll->callback((Fl_Callback*)cb_btnSelectAll);
        btnSelectAll->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* btnSelectAll
      { btnSelect = new Fl_Light_Button(5, 6, 74, 23, "Select");
        btnSelect->tooltip("Select nodes and beams");
        btnSelect->type(102);
        btnSelect->shortcut(0x40073);
        btnSelect->down_box(FL_DOWN_BOX);
        btnSelect->selection_color((Fl_Color)4);
        btnSelect->labelfont(1);
        btnSelect->labelsize(12);
        btnSelect->callback((Fl_Callback*)cb_btnSelect);
      } // Fl_Light_Button* btnSelect
      { btnMove = new Fl_Light_Button(5, 169, 74, 23, "Move");
        btnMove->tooltip("Move selected nodes");
        btnMove->type(102);
        btnMove->shortcut(0x4006d);
        btnMove->down_box(FL_DOWN_BOX);
        btnMove->selection_color((Fl_Color)4);
        btnMove->labelfont(1);
        btnMove->labelsize(12);
        btnMove->callback((Fl_Callback*)cb_btnMove);
      } // Fl_Light_Button* btnMove
      { btnCopy = new Fl_Light_Button(5, 195, 74, 23, "Copy");
        btnCopy->tooltip("Copy selected nodes");
        btnCopy->type(102);
        btnCopy->shortcut(0x40063);
        btnCopy->down_box(FL_DOWN_BOX);
        btnCopy->selection_color((Fl_Color)4);
        btnCopy->labelfont(1);
        btnCopy->labelsize(12);
        btnCopy->callback((Fl_Callback*)cb_btnCopy);
      } // Fl_Light_Button* btnCopy
      { btnDelete = new Fl_Button(5, 221, 74, 23, "Delete");
        btnDelete->tooltip("Delete selected nodes");
        btnDelete->shortcut(0xffff);
        btnDelete->labelfont(1);
        btnDelete->labelsize(12);
        btnDelete->callback((Fl_Callback*)cb_btnDelete);
      } // Fl_Button* btnDelete
      { btnCreateNodes = new Fl_Light_Button(5, 82, 74, 23, "Nodes");
        btnCreateNodes->tooltip("Create nodes");
        btnCreateNodes->type(102);
        btnCreateNodes->shortcut(0x4006e);
        btnCreateNodes->down_box(FL_DOWN_BOX);
        btnCreateNodes->value(1);
        btnCreateNodes->selection_color((Fl_Color)4);
        btnCreateNodes->labelfont(1);
        btnCreateNodes->labelsize(12);
        btnCreateNodes->callback((Fl_Callback*)cb_btnCreateNodes);
      } // Fl_Light_Button* btnCreateNodes
      { btnCreateLines = new Fl_Light_Button(5, 108, 74, 23, "Beams");
        btnCreateLines->tooltip("Create beams between nodes");
        btnCreateLines->type(102);
        btnCreateLines->shortcut(0x4006e);
        btnCreateLines->down_box(FL_DOWN_BOX);
        btnCreateLines->selection_color((Fl_Color)4);
        btnCreateLines->labelfont(1);
        btnCreateLines->labelsize(12);
        btnCreateLines->callback((Fl_Callback*)cb_btnCreateLines);
      } // Fl_Light_Button* btnCreateLines
      { btnCreateVectors = new Fl_Light_Button(5, 134, 74, 23, "Loads");
        btnCreateVectors->tooltip("Create node loads");
        btnCreateVectors->type(102);
        btnCreateVectors->shortcut(0x4006e);
        btnCreateVectors->down_box(FL_DOWN_BOX);
        btnCreateVectors->selection_color((Fl_Color)4);
        btnCreateVectors->labelfont(1);
        btnCreateVectors->labelsize(12);
        btnCreateVectors->callback((Fl_Callback*)cb_btnCreateVectors);
      } // Fl_Light_Button* btnCreateVectors
      o->end();
    } // Fl_Scroll* o
    { Fl_Scroll* o = new Fl_Scroll(87, 611, 756, 42);
      { outX = new Fl_Output(106, 619, 64, 27, "X ");
        outX->color((Fl_Color)31);
        outX->labelfont(1);
        outX->textfont(1);
        outX->textsize(16);
      } // Fl_Output* outX
      { outY = new Fl_Output(202, 620, 64, 26, "Y ");
        outY->color((Fl_Color)31);
        outY->labelfont(1);
        outY->textfont(1);
        outY->textsize(16);
      } // Fl_Output* outY
      { outZ = new Fl_Output(302, 620, 65, 26, "Z ");
        outZ->color((Fl_Color)31);
        outZ->labelfont(1);
        outZ->textfont(1);
        outZ->textsize(16);
      } // Fl_Output* outZ
      { outInfo = new Fl_Output(426, 619, 417, 26, "Info");
        outInfo->color((Fl_Color)31);
        outInfo->labelfont(1);
        outInfo->textfont(1);
      } // Fl_Output* outInfo
      o->end();
    } // Fl_Scroll* o
    wndMain->end();
  } // Fl_Double_Window* wndMain
}

void MainFrame::show() {
  wndMain->size(Fl::w()-40, Fl::h()-40);
  wndMain->position(20,40);
  outInfo->value("Använd musen för att placera ut noder.");
  wndMain->show();
  workspaceView->setViewModeChangeEvent(this);
  workspaceView->setCoordinateEvent(this);
  workspaceView->setSelectionChangedEvent(this);

  btnMove->deactivate();
  btnCopy->deactivate();
  btnDelete->deactivate();

  workspaceView->show();
}

void MainFrame::onViewModeChange(TViewModeEvent newMode) {
  switch (newMode) {
  case VM_SELECT_SHAPES:
  	outInfo->value("Välj noder och stänger med musen.");
  	btnSelect->setonly();
  	break;
  case VM_CREATE_LINES:
  	outInfo->value("Skapa stänger genom att markera två noder.");
  	btnCreateLines->setonly();
  	break;
  case VM_CREATE_VECTORS:
  	outInfo->value("Markera en nod för att placera en last.");
  	btnCreateVectors->setonly();
  	break;
  case VM_CREATE_SHAPES:
  	outInfo->value("Använd musen för att placera ut noder.");
  	btnCreateNodes->setonly();
  	break;
  case VM_MOVE_SHAPES:
  	outInfo->value("Använd musen för att välja startpunkt vid förflyttning av noder.");
  	btnMove->setonly();
  	break;
  case VM_COPY_SHAPES:
  	outInfo->value("Använd musen för att välja startpunkt vid kopiering av noder.");
  	btnCopy->setonly();
  	break;
  default:
  	btnCreateNodes->setonly();
  	break;
  }
}

void MainFrame::onCoordinate(double x, double y, double z) {
  char buffer[255];
  sprintf(buffer, "%4.2g", x);
  outX->value(buffer);
  sprintf(buffer, "%4.2g", y);
  outZ->value(buffer);
  sprintf(buffer, "%4.2g", z);
  outY->value(buffer);
}

void MainFrame::onSelectionChanged() {
  if (workspaceView->getSelection()->getSize()>0)
  {
  	btnMove->activate();
  	btnCopy->activate();
  	btnDelete->activate();
  }
  else
  {
  	btnMove->deactivate();
  	btnCopy->deactivate();
  	btnDelete->deactivate();
  }
}
